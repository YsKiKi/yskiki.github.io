<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于GitHub的博客搭建</title>
    <url>//posts/Blog-building/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><strong>前提紧要：请确保自身具备最基本的阅读理解能力，会使用翻译，会使用搜索引擎。</strong></li>
<li><strong>如不具备上述能力，请立即关闭此教程。</strong></li>
</ul>
<ul>
<li><a href="#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">环境准备</a></li>
<li><a href="#github%E8%B4%A6%E5%8F%B7%E6%B3%A8%E5%86%8C">GitHub账号注册</a></li>
<li><a href="#git%E9%80%9A%E8%BF%87ssh%E7%BB%91%E5%AE%9Agithub">Git通过ssh绑定GitHub</a></li>
<li><a href="#nodejs%E9%85%8D%E7%BD%AE">Nodejs配置</a><ul>
<li><a href="#%E8%AE%BE%E7%BD%AEnpm%E5%9C%A8%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84%E5%92%8C%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">设置npm在安装全局模块时的路径和环境变量</a></li>
<li><a href="#%E6%B5%8B%E8%AF%95">测试</a></li>
</ul>
</li>
<li><a href="#%E5%AE%89%E8%A3%85hexo">安装Hexo</a><ul>
<li><a href="#%E5%88%9B%E5%BB%BAgithub-pages">创建GitHub Pages</a></li>
<li><a href="#%E6%AD%A3%E5%BC%8F%E5%AE%89%E8%A3%85hexo">正式安装Hexo</a></li>
<li><a href="#%E5%B0%86hexo%E9%83%A8%E7%BD%B2%E5%88%B0github">将Hexo部署到GitHub</a></li>
</ul>
</li>
</ul>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>所需环境：Windows、Git、Nodejs<br><strong>打开安装包后全部下一步即可</strong><br>如果实在不会，请进入<a href="https://www.baidu.com/">百度</a>、<a href="https://cn.bing.com/">bing</a>等进行搜索  </p>
<p>↓ 附上下载链接 ↓</p>
<ul>
<li>Windows<br><a href="https://gitee.com/YsKIKI/blog/releases/download/1.0.1/Git-2.43.0-64-bit.exe">Git-v2.43.0-x64</a><br><a href="https://gitee.com/YsKIKI/blog/releases/download/1.0.1/node-v18.19.0-x64.msi">node-v18.19.0-x64</a></li>
</ul>
<h3 id="GitHub账号注册"><a href="#GitHub账号注册" class="headerlink" title="GitHub账号注册"></a>GitHub账号注册</h3><blockquote>
<p>Github是全球最大的程序员交友♂平台（doge）</p>
<blockquote>
<p>有GitHub账号的可以跳过这一步</p>
</blockquote>
</blockquote>
<p>点击进入<a href="https://github.com/">Github官网</a>  </p>
<p>点击右上角<code>sign up</code>进入注册页面，输入邮箱，创建密码，设置昵称</p>
<blockquote>
<p>然后 下一步 下一步 下一步 下一步……</p>
<blockquote>
<p>如果实在不会，请使用<a href="https://www.baidu.com/">百度</a>、<a href="https://cn.bing.com/">bing</a>进行搜索</p>
</blockquote>
</blockquote>
<h3 id="Git通过ssh绑定GitHub"><a href="#Git通过ssh绑定GitHub" class="headerlink" title="Git通过ssh绑定GitHub"></a>Git通过ssh绑定GitHub</h3><blockquote>
<p>SSH（安全外壳协议，Secure Shell 的缩写）是建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议，利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。简单来说，SSH可以保障你的账户安全，将你的数据加密压缩，它不仅可以防止其他人截获你的数据，还能加快传输速度。</p>
</blockquote>
<p>由于Git bash自带ssh，所以无需安装  </p>
<p>在任意位置点击鼠标右键，打开<code>Git Bash</code>，输入<code>ssh</code>检查ssh<br>如果出现以下内容即已安装ssh：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ ssh</span><br><span class="line"><span class="function">usage: <span class="title">ssh</span> [-46<span class="title">AaCfGgKkMNnqsTtVvXxYy</span>] [-<span class="title">B</span> <span class="title">bind_interface</span>] [-<span class="title">b</span> <span class="title">bind_address</span>]</span></span><br><span class="line"><span class="function">           [-<span class="title">c</span> <span class="title">cipher_spec</span>] [-<span class="title">D</span> [<span class="title">bind_address</span>:]<span class="title">port</span>] [-<span class="title">E</span> <span class="title">log_file</span>]</span></span><br><span class="line"><span class="function">           [-<span class="title">e</span> <span class="title">escape_char</span>] [-<span class="title">F</span> <span class="title">configfile</span>] [-<span class="title">I</span> <span class="title">pkcs11</span>] [-<span class="title">i</span> <span class="title">identity_file</span>]</span></span><br><span class="line"><span class="function">           [-<span class="title">J</span> <span class="title">destination</span>] [-<span class="title">L</span> <span class="title">address</span>] [-<span class="title">l</span> <span class="title">login_name</span>] [-<span class="title">m</span> <span class="title">mac_spec</span>]</span></span><br><span class="line"><span class="function">           [-<span class="title">O</span> <span class="title">ctl_cmd</span>] [-<span class="title">o</span> <span class="title">option</span>] [-<span class="title">P</span> <span class="title">tag</span>] [-<span class="title">p</span> <span class="title">port</span>] [-<span class="title">Q</span> <span class="title">query_option</span>]</span></span><br><span class="line"><span class="function">           [-<span class="title">R</span> <span class="title">address</span>] [-<span class="title">S</span> <span class="title">ctl_path</span>] [-<span class="title">W</span> <span class="title">host:port</span>] [-<span class="title">w</span> <span class="title">local_tun</span>[:<span class="title">remote_tun</span>]]</span></span><br><span class="line"><span class="function">           <span class="title">destination</span> [<span class="title">command</span> [<span class="title">argument</span> ...]]</span></span><br></pre></td></tr></table></figure>
<p>输入<code>ssh-keygen -t rsa</code>，敲击四次回车键，创建ssh密钥  </p>
<p>ssh密钥保存在<code>C:\Users\&lt;你的用户名&gt;\.ssh</code>  </p>
<blockquote>
<p>如果没有<code>.ssh</code>,请打开“显示隐藏文件”<br>若不会，请通过<a href="https://www.baidu.com/">百度</a>、<a href="https://cn.bing.com/">bing</a>自行查找 ⌈如何显示隐藏文件⌋</p>
</blockquote>
<p>右键用记事本打开<code>id_rsa.pub</code>，复制里面的全部内容，进入你的 GitHub 主页，先点击右上角，再点击 <strong>settings</strong>  </p>
<p>先点击右边的 <strong>SSH and GPG keys</strong>，再点击 <strong>New SSH key</strong>：<br><img src="/Resources/GitHub-1.png" alt="GitHub-1">  </p>
<p>将复制的公钥 id_rsa.pub 的内容粘贴到 key 内，再点击 Add SSH key，如下图：<br><img src="/Resources/GitHub-2.png" alt="GitHub-2">  </p>
<p>在<code>Git Bash</code>窗口输入<code>ssh -T git@github.com</code>进行检验，出现  </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Are you sure you want to continue connecting(yes/no/[fingerprint])?</span><br></pre></td></tr></table></figure>
<p>输入<code>yes</code>出现：  </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Hi &lt;你的GitHub昵称&gt;! You&#x27;ve successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell access.</span><br></pre></td></tr></table></figure>
<p>即为成功  </p>
<h3 id="Nodejs配置"><a href="#Nodejs配置" class="headerlink" title="Nodejs配置"></a>Nodejs配置</h3><p>在<code>Git Bash</code>窗口输入<code>node -v</code>和<code>npm -v</code>命令检查版本：  </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v18.<span class="number">19</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">$ npm -v</span><br><span class="line"><span class="number">10</span>.<span class="number">2</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>主要是检查nodejs和npm有没有安装，版本不同影响不大  </p>
</blockquote>
<h4 id="设置npm在安装全局模块时的路径和环境变量"><a href="#设置npm在安装全局模块时的路径和环境变量" class="headerlink" title="设置npm在安装全局模块时的路径和环境变量"></a>设置npm在安装全局模块时的路径和环境变量</h4><p>在 <strong>你永远不会删除的地方中</strong> 新建 <strong>文件夹 “A”</strong><br>在其中 新建两个空文件夹<code>node_cache</code>、<code>node_global</code>：<br><img src="/Resources/GitHub-3.png" alt="GitHub-3">  </p>
<blockquote>
<p><strong>！！！请勿删除此文件夹！！！</strong><br>否则模块将被删除，需要重新配置</p>
</blockquote>
<p>打开cmd，输入如下两个命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix &quot;&lt;你的node_global文件夹路径&gt;&quot;</span><br><span class="line">npm config <span class="built_in">set</span> cache &quot;&lt;你的node_cache文件夹路径&gt;&quot;</span><br></pre></td></tr></table></figure>
<p>设置环境变量：  </p>
<p>右键 此电脑 –&gt; 属性 –&gt; 高级系统设置 –&gt; 环境变量  </p>
<p>然后在系统变量中新建一个变量<br>点击<code>系统变量(S)</code>下的<code>新建(W)…</code><br>出现：<br><img src="/Resources/GitHub-4.png" alt="GitHub-4">  </p>
<p>输入 变量名为 <strong>“NODE_PATH”</strong><br>输入 变量值为 <strong>“&lt;文件夹 “A” 的路径&gt;”</strong>  </p>
<blockquote>
<p>你问我什么是 <strong>文件夹 “A”</strong> ？</p>
<blockquote>
<p><a href="#%E8%AE%BE%E7%BD%AEnpm%E5%9C%A8%E5%AE%89%E8%A3%85%E5%85%A8%E5%B1%80%E6%A8%A1%E5%9D%97%E6%97%B6%E7%9A%84%E8%B7%AF%E5%BE%84%E5%92%8C%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">喏，在这</a></p>
</blockquote>
</blockquote>
<p>然后编辑<code>用户变量(U)</code>里的<code>Path</code>，点按<code>编辑(E)…</code>，将相应npm的路径改为：<br><code>&lt;你的node_global文件夹路径&gt;</code>  </p>
<p><strong>按确定！按确定！按确定！</strong>  </p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在 cmd 命令行下执行<code>npm install webpack -g</code>，出现：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">+ webpack@<span class="number">4</span>.<span class="number">41</span>.<span class="number">5</span></span><br><span class="line">added <span class="number">322</span> packages from <span class="number">197</span> contributors <span class="keyword">in</span> <span class="number">250</span>.<span class="number">122</span>s</span><br></pre></td></tr></table></figure>
<p>即为成功，然后<code>webpack</code>这个模块已经在我们设置默认的文件夹中了  </p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><h4 id="创建GitHub-Pages"><a href="#创建GitHub-Pages" class="headerlink" title="创建GitHub Pages"></a>创建GitHub Pages</h4><p>Hexo就是我们搭建博客的框架，在安装之前，我们要先在GitHub上创立一个仓库<br>进入<a href="https://github.com/">GitHub个人主页</a>，右上角创建仓库：  </p>
<p><img src="/Resources/GitHub-5.png" alt="GitHub-5"><br><img src="/Resources/GitHub-6.png" alt="GitHub-6"><br>点击 <strong>settings</strong> ：  </p>
<p><img src="/Resources/GitHub-7.png" alt="GitHub-7"><br>点击 <strong>pages</strong> ：  </p>
<p><img src="/Resources/GitHub-8.png" alt="GitHub-8"><br>出现<code>&lt;你的GitHub昵称&gt;.github.io</code>即为成功：  </p>
<p><img src="/Resources/GitHub-9.png" alt="GitHub-9">  </p>
<h4 id="正式安装Hexo"><a href="#正式安装Hexo" class="headerlink" title="正式安装Hexo"></a>正式安装Hexo</h4><p>新建Blog文件夹，在文件夹内右键打开<code>Git Bash</code>，输入以下npm命令安装Hexo：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装完成后，输入<code>hexo init</code>初始化博客,文件夹内会出现以下文件：  </p>
<p><img src="/Resources/GitHub-10.png" alt="GitHub-10"><br>这个文件夹就是你的博客啦！  </p>
<p>接下来，在 Bash 窗口内：<br>输入<code>hexo g</code>静态部署<br>输入<code>hexo s</code>在4000端口上部署：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>这时候用浏览器打开 <a href="https://localhost:4000/">https://localhost:4000</a> 即可看到新部署的网页。<br>别急，回到Git Bash窗口，按ctrl +c 停止运行服务器。  </p>
<h4 id="将Hexo部署到GitHub"><a href="#将Hexo部署到GitHub" class="headerlink" title="将Hexo部署到GitHub"></a>将Hexo部署到GitHub</h4><p>在文件夹内 右键 用记事本打开<code>_config.yml</code>，在最底下加上：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:&lt;………………&gt;.github.io.git</span>  <span class="comment">#你的仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
<p>你的仓库地址：<br><img src="/Resources/GitHub-11.png" alt="GitHub-11">  </p>
<p>回到Blog文件夹，右键<code>Git Bash here</code>，在Git Bash中输入：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后 <strong>分别</strong> 输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean   <span class="comment">#清除缓存文件 db.json 和已生成的静态文件 public</span></span><br><span class="line">hexo g       <span class="comment">#生成网站静态文件到默认设置的 public 文件夹</span></span><br><span class="line">hexo d       <span class="comment">#生成网站静态文件，并部署到设定的仓库</span></span><br></pre></td></tr></table></figure>
<p>或者输入：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d		<span class="comment">#和上面的没有不同，只是将命令串起来了</span></span><br></pre></td></tr></table></figure>
<p>完成以后，打开浏览器，输入 <a href="https://xxx.github.io/">https://xxx.github.io</a> 就可以打开你的网页了。  </p>
<p>下一篇：<a href="https://kk-wuyue.top/posts/G-blog-To-domain/">如何自定义博客域名</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Blog</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyenv安装</title>
    <url>//posts/pyenv-installation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="#pyenv%E5%AE%89%E8%A3%85">Pyenv安装</a><ul>
<li><a href="#windows-%E5%AE%89%E8%A3%85-pyenv">Windows 安装 Pyenv</a></li>
<li><a href="#linux-%E5%AE%89%E8%A3%85pyenv">Linux 安装Pyenv</a></li>
</ul>
</li>
<li><a href="#pyenv-%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE">Pyenv 相关设置</a><ul>
<li><a href="#%E9%80%9A%E8%BF%87%E9%95%9C%E5%83%8F%E6%BA%90%E4%B8%8B%E8%BD%BDpython%E7%89%88%E6%9C%AC%E4%BB%A531011%E4%B8%BA%E4%BE%8B">通过镜像源下载python版本（以3.10.11为例）：</a></li>
<li><a href="#python-pip-%E6%8D%A2%E6%BA%90">Python pip 换源：</a></li>
<li><a href="#pyenv%E8%AE%BE%E7%BD%AE%E4%BD%BF%E7%94%A8%E7%9A%84python%E7%89%88%E6%9C%AC">Pyenv设置使用的Python版本：</a></li>
</ul>
</li>
</ul>
<h3 id="Pyenv安装"><a href="#Pyenv安装" class="headerlink" title="Pyenv安装"></a>Pyenv安装</h3><h4 id="Windows-安装-Pyenv"><a href="#Windows-安装-Pyenv" class="headerlink" title="Windows 安装 Pyenv"></a>Windows 安装 Pyenv</h4><ol>
<li><p>打开 <code>Powershell</code>  </p>
</li>
<li><p>执行以下命令安装 <code>pyenv-win</code>：  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="literal">-UseBasicParsing</span> <span class="literal">-Uri</span> <span class="string">&quot;https://gitee.com/treespacex/pyenv-win/blob/master/pyenv-win/install-pyenv-win.ps1&quot;</span> <span class="literal">-OutFile</span> <span class="string">&quot;./install-pyenv-win.ps1&quot;</span>; &amp;<span class="string">&quot;./install-pyenv-win.ps1&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上述内容为 <code>pyenv-win</code> 的gitee镜像地址，原始命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="literal">-UseBasicParsing</span> <span class="literal">-Uri</span> <span class="string">&quot;https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1&quot;</span> <span class="literal">-OutFile</span> <span class="string">&quot;./install-pyenv-win.ps1&quot;</span>; &amp;<span class="string">&quot;./install-pyenv-win.ps1&quot;</span></span><br></pre></td></tr></table></figure></blockquote>
</li>
<li><p>安装完成后，重启 <code>Powershell</code>  </p>
</li>
<li><p>运行以下命令验证安装是否成功：  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pyenv <span class="literal">--version</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果安装成功，你将看到 <code>pyenv</code> 的版本信息。</p>
</li>
</ol>
<h4 id="Linux-安装Pyenv"><a href="#Linux-安装Pyenv" class="headerlink" title="Linux 安装Pyenv"></a>Linux 安装Pyenv</h4><ol>
<li><p>打开终端</p>
</li>
<li><p>执行以下命令安装 <code>pyenv</code>：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://pyenv.run | bash</span><br></pre></td></tr></table></figure></li>
<li><p>验证安装是否成功：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv --version</span><br></pre></td></tr></table></figure></li>
<li><p>如果安装成功，你将看到 <code>pyenv</code> 的版本信息。</p>
</li>
</ol>
<h3 id="Pyenv-相关设置"><a href="#Pyenv-相关设置" class="headerlink" title="Pyenv 相关设置"></a>Pyenv 相关设置</h3><h4 id="通过镜像源下载python版本（以3-10-11为例）："><a href="#通过镜像源下载python版本（以3-10-11为例）：" class="headerlink" title="通过镜像源下载python版本（以3.10.11为例）："></a>通过镜像源下载python版本（以3.10.11为例）：</h4><ol>
<li><p>设置镜像源的临时环境变量  </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux</span></span><br><span class="line">PYTHON_BUILD_MIRROR_URL=<span class="string">&quot;https://npm.taobao.org/mirrors/python&quot;</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Windows</span></span><br><span class="line"><span class="variable">$env:PYTHON_BUILD_MIRROR_URL</span> = <span class="string">&quot;https://npm.taobao.org/mirrors/python&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>安装指定版本的Python：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.10.11</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Python-pip-换源："><a href="#Python-pip-换源：" class="headerlink" title="Python pip 换源："></a>Python pip 换源：</h4><ul>
<li><p>所有操作系统一致：  </p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Pyenv设置使用的Python版本："><a href="#Pyenv设置使用的Python版本：" class="headerlink" title="Pyenv设置使用的Python版本："></a>Pyenv设置使用的Python版本：</h4><ul>
<li><p>全局设置：  </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv global 3.10.11</span><br></pre></td></tr></table></figure></li>
<li><p>文件夹设置（在当前目录下生效）：  </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv <span class="built_in">local</span> 3.10.11</span><br></pre></td></tr></table></figure></li>
<li><p>临时设置（仅在当前shell会话中生效）：  </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv shell 3.10.11</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Pyenv</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>工具获取</title>
    <url>//posts/tools-acquisition/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h1><blockquote>
<p><del>（记得解压缩哦~）</del></p>
<blockquote>
<p>（换仓库了，不用解压缩了）  </p>
</blockquote>
</blockquote>
<hr>
<h3 id="原神-抽卡链接获取工具"><a href="#原神-抽卡链接获取工具" class="headerlink" title="原神 抽卡链接获取工具"></a>原神 抽卡链接获取工具</h3><h4 id="Android："><a href="#Android：" class="headerlink" title="Android："></a>Android：</h4><p><a href="https://gitee.com/YsKIKI/blog/releases/download/1.0/%E5%8E%9F%E7%A5%9E%E6%8A%BD%E5%8D%A1%E9%93%BE%E6%8E%A5%E8%8E%B7%E5%8F%96%E5%B7%A5%E5%85%B7.apk">Genshin-Link.apk</a>  </p>
<h4 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a>Windows：</h4><p>打开游戏，<font color="red">切换到抽卡记录页面，翻几页</font><br>返回桌面，按住<code>Shift</code>右键打开<code>PowerShell</code>，输入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iex(irm  <span class="string">&#x27;https://img.lelaer.com/gf.ps1&#x27;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="崩坏·星穹铁道-抽卡链接获取工具"><a href="#崩坏·星穹铁道-抽卡链接获取工具" class="headerlink" title="崩坏·星穹铁道 抽卡链接获取工具"></a>崩坏·星穹铁道 抽卡链接获取工具</h3><h4 id="Android：-1"><a href="#Android：-1" class="headerlink" title="Android："></a>Android：</h4><p><a href="https://gitee.com/YsKIKI/blog/releases/download/1.0/%E5%B4%A9%E5%9D%8F%C2%B7%E6%98%9F%E7%A9%B9%E9%93%81%E9%81%93%E6%8A%BD%E5%8D%A1%E9%93%BE%E6%8E%A5%E8%8E%B7%E5%8F%96%E5%B7%A5%E5%85%B7.apk">Star Rail-Link.apk</a>  </p>
<h4 id="Windows：-1"><a href="#Windows：-1" class="headerlink" title="Windows："></a>Windows：</h4><p>打开游戏，<font color="red">切换到抽卡记录页面，翻几页</font><br>返回桌面，按住<code>Shift</code>右键打开<code>PowerShell</code>，输入以下内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">irm</span> https://blog.kk<span class="literal">-wuyue</span>.top/Resources/hksr.ps1 | <span class="built_in">iex</span></span><br></pre></td></tr></table></figure>

<p>如果不可用，使用以下内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Net.ServicePointManager</span>]::SecurityProtocol = [<span class="type">Net.ServicePointManager</span>]::SecurityProtocol <span class="operator">-bor</span> [<span class="type">Net.SecurityProtocolType</span>]::Tls12; <span class="built_in">Invoke-Expression</span> (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&quot;https://imgheybox.max-c.com/game/star_rail/link1.ps1&quot;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="绝区零-抽卡链接获取工具"><a href="#绝区零-抽卡链接获取工具" class="headerlink" title="绝区零 抽卡链接获取工具"></a>绝区零 抽卡链接获取工具</h3><h4 id="Windows：-2"><a href="#Windows：-2" class="headerlink" title="Windows："></a>Windows：</h4><p>打开游戏，<font color="red">切换到抽卡记录页面，翻几页</font><br>返回桌面，按住<code>Shift</code>右键打开<code>PowerShell</code>，输入以下内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">iex</span>(<span class="built_in">irm</span> <span class="string">&#x27;https://blog.kk-wuyue.top/Resources/zzzgacha.ps1&#x27;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="原神、崩铁三端私服打包下载"><a href="#原神、崩铁三端私服打包下载" class="headerlink" title="原神、崩铁三端私服打包下载"></a>原神、崩铁三端私服打包下载</h3><p><a href="https://www.acfun.cn/v/ac24519842">私服</a></p>
<hr>
<h3 id="Notepad-下载"><a href="#Notepad-下载" class="headerlink" title="Notepad++下载"></a>Notepad++下载</h3><p><a href="https://gitee.com/YsKIKI/blog/releases/download/1.0.4/Notepad_plus_plus_V8.6.4.exe">Notepad++ [ v8.6.4 ]</a></p>
<hr>
<center><del>其他资源不定期更新中，我必咕咕咕OwO（雾）</del> </center>
<br>
<div id="random-img" style="width: clamp(200px, 100%, 450px); aspect-ratio: 1/1; margin: 0 auto;">
  <img style="width: 100%; height: 100%; object-fit: cover;">
</div>
<script>
  const img = document.querySelector('#random-img img');
  img.src = "https://image.kk-wuyue.top/random?dir=Quan&type=img&t=" + Date.now();
</script>
<br>

<hr>
<ul>
<li><a href="https://blog.kk-wuyue.top/">返回主页</a></li>
</ul>
]]></content>
      <categories>
        <category>工具获取</category>
      </categories>
      <tags>
        <tag>原神</tag>
        <tag>崩坏·星穹铁道</tag>
        <tag>私服</tag>
      </tags>
  </entry>
  <entry>
    <title>常用命令集：screen、vim、系统设置、压缩与解压</title>
    <url>//posts/command-collection/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Screen相关命令："><a href="#Screen相关命令：" class="headerlink" title="Screen相关命令："></a>Screen相关命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -S &lt;名字&gt;        <span class="comment"># 创建一个新的终端会话</span></span><br><span class="line">Ctrl-A-D                <span class="comment"># 退出当前的终端会话，保持后台运行</span></span><br><span class="line">screen -<span class="built_in">ls</span>              <span class="comment"># 查看当前存在的所有终端会话</span></span><br><span class="line">screen -S &lt;名字&gt; -X quit <span class="comment"># 删除某个终端会话</span></span><br><span class="line">screen -r &lt;名字&gt;        <span class="comment"># 切换到某个终端会话</span></span><br></pre></td></tr></table></figure>

<h3 id="Vim相关命令："><a href="#Vim相关命令：" class="headerlink" title="Vim相关命令："></a>Vim相关命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim &lt;文件名&gt;            <span class="comment"># 打开文件</span></span><br><span class="line">i                       <span class="comment"># 进入 insert 编辑模式</span></span><br><span class="line">esc                     <span class="comment"># 退出 insert 编辑模式</span></span><br><span class="line">:w                      <span class="comment"># 保存但不退出</span></span><br><span class="line">:w &lt;新文件名&gt;           <span class="comment"># 将文件另存为新文件</span></span><br><span class="line">:q                      <span class="comment"># 不保存退出</span></span><br><span class="line">:wq                     <span class="comment"># 保存并退出</span></span><br><span class="line">:!                      <span class="comment"># 强制执行命令</span></span><br><span class="line">:q!                     <span class="comment"># 强制不保存退出，用于修改文件之后不保存数据退出</span></span><br><span class="line">:wq!                    <span class="comment"># 强制保存退出，当文件所有者或 root 用户对文件没有写权限时，强制写入数据使用</span></span><br></pre></td></tr></table></figure>

<h3 id="修改系统运行级别，重启后依然显示桌面："><a href="#修改系统运行级别，重启后依然显示桌面：" class="headerlink" title="修改系统运行级别，重启后依然显示桌面："></a>修改系统运行级别，重启后依然显示桌面：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sf /lib/systemd/system/runlevel5.target /etc/systemd/system/default.target</span><br></pre></td></tr></table></figure>

<h3 id="文件相关命令："><a href="#文件相关命令：" class="headerlink" title="文件相关命令："></a>文件相关命令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> &lt;文件名&gt;          <span class="comment"># 新建文件</span></span><br><span class="line"><span class="built_in">mkdir</span> &lt;目录名&gt;          <span class="comment"># 新建文件夹</span></span><br></pre></td></tr></table></figure>

<h3 id="常用解压与压缩命令："><a href="#常用解压与压缩命令：" class="headerlink" title="常用解压与压缩命令："></a>常用解压与压缩命令：</h3><h4 id="tar文件"><a href="#tar文件" class="headerlink" title=".tar文件"></a>.tar文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf &lt;文件名&gt;.tar                  <span class="comment"># 解包（仅打包，不压缩）</span></span><br><span class="line">tar -cvf &lt;文件名&gt;.tar DirName          <span class="comment"># 将DirName和其下所有文件（夹）打包</span></span><br></pre></td></tr></table></figure>

<h4 id="gz文件"><a href="#gz文件" class="headerlink" title=".gz文件"></a>.gz文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gunzip &lt;文件名&gt;.gz                     <span class="comment"># 解压方式1</span></span><br><span class="line">gzip -d &lt;文件名&gt;.gz                    <span class="comment"># 解压方式2</span></span><br><span class="line">gzip &lt;文件名&gt;                          <span class="comment"># 压缩，只能压缩文件</span></span><br></pre></td></tr></table></figure>

<h4 id="tar-gz-和-tgz文件"><a href="#tar-gz-和-tgz文件" class="headerlink" title=".tar.gz 和 .tgz文件"></a>.tar.gz 和 .tgz文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf &lt;文件名&gt;.tar.gz              <span class="comment"># 解压</span></span><br><span class="line">tar -zcvf &lt;文件名&gt;.tar.gz DirName      <span class="comment"># 压缩，将DirName和其下所有文件（夹）压缩</span></span><br><span class="line">tar -C DesDirName -zxvf &lt;文件名&gt;.tar.gz <span class="comment"># 解压到目标路径</span></span><br></pre></td></tr></table></figure>

<h4 id="zip文件"><a href="#zip文件" class="headerlink" title=".zip文件"></a>.zip文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip &lt;文件名&gt;.zip                     <span class="comment"># 解压</span></span><br><span class="line">zip &lt;文件名&gt;.zip DirName               <span class="comment"># 将DirName压缩</span></span><br><span class="line">zip -r &lt;文件名&gt;.zip DirName            <span class="comment"># 压缩，递归处理，将指定目录下的所有文件和子目录一并压缩</span></span><br></pre></td></tr></table></figure>

<h4 id="rar文件"><a href="#rar文件" class="headerlink" title=".rar文件"></a>.rar文件</h4><blockquote>
<p>注意：macOS和Linux默认没有自带rar工具，需要单独安装。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rar x &lt;文件名&gt;.rar                     <span class="comment"># 解压</span></span><br><span class="line">rar a &lt;文件名&gt;.rar DirName             <span class="comment"># 压缩</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>命令行</tag>
        <tag>screen</tag>
        <tag>vim</tag>
        <tag>压缩解压</tag>
      </tags>
  </entry>
  <entry>
    <title>AI与人</title>
    <url>//posts/ai-with-human/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>本文转载自 <a href="https://aweidao1.com/t/32444047?page=1">阿苇岛</a> ，作者：Das6fY5  </p>
<blockquote>
<p>如有侵权请联系 QQ：<code>2786411898</code> 删除  </p>
</blockquote>
</blockquote>
<h1 id="第一章-遗弃"><a href="#第一章-遗弃" class="headerlink" title="第一章 遗弃"></a>第一章 遗弃</h1><p>“求求你不要扔掉我。”少女走在他的背后。  </p>
<p>“我可以端茶倒水，为你暖身子，我可以在白天给你打扫房间，到夜里把自己折进床底下……只要每两周充一次电就好，电费我会去兼职赚钱交给你，让我做什么都行，除了……”  </p>
<p>他停住，站在一处高崖旁。面前是一个巨大的深坑，胡乱堆砌着整个城市几十年来的垃圾。  </p>
<p>“除了不要把我丢到垃圾场里……”她，这台已经过时了好几代的二手机器人跪在了地上，泪眼朦胧的说着。   </p>
<p>“不是我想扔你。”他站在原地，望着远处的大垃圾场点了一根烟。  </p>
<p>“呼——可是每个公民只能合法拥有一台机器人，别人看见我的机器人许可证上有你的型号，都在暗地里笑话我。”他挠挠头，这台从他小时候就伴随着他的机器人骑士早就成了青梅竹马一样的存在，只是型号实在太老旧，不得不报废掉换个新的。  </p>
<p>“我，我会努力更新我的系统的……”她说到一半就把话咽了回去。她的生产商都已经破产了，不提二手买卖带来的问题，就是一般的售后服务也早就终止了。所以，当别的机器人可以随意更换外观，模拟他人人格，构造全息幻象的时候，她还是只能用老旧的芯片链接一般的网络，在老掉牙的网站上寻找几个能逗主人开心的笑话。  </p>
<p>望着远处飞来飞去的垃圾车，他把烟掐掉，踩灭。“哪怕是半个月前，零件黑市还没有倒闭的时候，我都还会考虑继续把你放在家里供着……可是现在，你这种型号的备件都已经买不到了。我只能选择放弃。”  </p>
<p>晚风中他回忆着有关她的那些细节。PR3-7150家庭型机器人，东湾半导体与电子技术公司研发，远海机械承制，2069年第一次发售，2070年夺得电子家用商品年度大奖，而如今，则是无人问津的古董。她的编号是ct34679158，款式是茉莉白。她在前主人的家里任劳任怨的干了18年，因满身故障而被随手丢掉，又终于被他的父母在地摊上买下。此后不久，机器人限拥政策便开始实施了。  </p>
<p>和外人说话时，他往往称她为“那倒霉玩意”。但私下里，他还是喜欢叫她的名字，爱尔莎。  </p>
<p>回家的路上她好像格外的兴奋。这里指指那里看看，又搜肠刮肚的讲几个早就讲过的笑话。  </p>
<p>好像每一次都是如此。他找出各种不可抵抗的理由要把她扔掉，但是到了垃圾场边上又会心软。明明只是下个指令或者推她一把的事情，可只要一回想起十几年来她那笨拙的陪伴，他就不得不调转方向，带她回家。  </p>
<p>“又是这样。”他坐在沙发上看着屏幕。周一上班的时候指定又要被同事嘲笑了。“真是的，怎么都甩不掉这家伙啊。”  </p>
<p>“别这么说嘛……”爱尔莎凑了过来，靠在他身上。有些老旧的蒙皮带来了熟悉的触感，毛细热管散发着热量。“我，我是不能没有你的。”  </p>
<p>“唉……”他摇摇头，满脑子都在翻来覆去的想着那天看见的新款机器女仆。  </p>
<p>新款的机器女仆眼媚情柔，话少活好。广告里，她可以左手帮着买主在下半身舒筋活络，右手则改成工具模式处理刚刚切好的鱼生。她可以精密的控制两腿之间的筒状服务系统的振动，摩擦与温度，并通过记录数据来匹配出快感最强的服侍模式。她可以调用ar接口随时改变外观，更内置了多种人格，现在购买，还会附赠全息会员资格，送你一个让她可以进入虚拟世界的会员权限。  </p>
<p>而这些都化为了泡影。为了防止人们对机器人的滥用，尤其是防止某些将机器人改造为个人武装的家伙，同一时间，个人所拥有的机器人最多只能有一个。想换新的，就得报废旧的。这让他不得不从梦幻中醒来，来面对面前，这台实际年龄比他还大的老家伙。  </p>
<p>“在想什么呢？”正在给他泡茶的她好像察觉到什么，把头转了过来。“在想我吗？”她摆出一个笑脸，说着从机器人公共平台上学来的情话。  </p>
<p>“谁会想你啊。”他咕哝着。  </p>
<p>但实际上他的思绪已经无法从她身上脱离了。一想到她的老旧，就要想到零件，系统，维修，一想到这些，他就会想起来小时候和她第一次见面的时候。  </p>
<h1 id="第二章-回忆"><a href="#第二章-回忆" class="headerlink" title="第二章 回忆"></a>第二章 回忆</h1><p>他和她第一次见面的时候他才12岁。那时候他还只是个缺乏管教的毛头小子，而父母都忙于工作，要挣钱养家。好在他的父亲是一名很优秀的工程师，那时的机器人还不需要证件和过户，他便在地摊上把她买下。  </p>
<p>他的父亲用了三个月的时间，每天都在车库里忙活。终于，三个月后，那台被前主人用得千疮百孔的家用机器人，终于变成了他生日那天，许愿要一辈子陪伴的存在。  </p>
<p>生日那天，他吹完蜡烛，就听见父亲说要送给他一个礼物。他闭上眼，在等的不耐烦的时候终于睁开，看见了父亲手边牵着的她。  </p>
<p>那天她穿着一身白色的连衣裙，头上的短发同样洁白，簇拥着那张漂亮的脸蛋。她的身材玲珑有致，四肢的蒙皮光滑崭新，与其说是一台被修好的二手机器，那时的他更愿意相信，她是从天上掉下来陪伴他的天使姐姐。  </p>
<p>她负责起了家务，还有陪他学习的任务。父母给她起名字叫爱尔莎，这本来是预备给他们自己的女儿的名字。那时，他常常捉弄她，想要从她身上揪出些笨拙呆板的缺陷，却从来没有成功。爱尔莎是搭载第一代人格芯片的高级机器人，和此前那些答非所问的次品比起来有了质的飞跃，以至于时间一长，他几乎忘记了她是机器，而只把她当做陪自己读书的大姐姐。  </p>
<p>那会还是东湾公司靠着她的型号大肆扩张的年代。尽管距离她的诞生已经过了十几年，但社会仍将她们视为新时代的起点。那时的她，风华正茂，成为了他童年记忆中最为明亮的那一抹色彩。  </p>
<p>但时代就是这样一种残酷的东西。东湾公司收购碳硅科技的计划最终变成闹剧，于是企业一蹶不振，业绩连年下滑，终于被人人智能给合并。这是人人智能抢占市场份额的计划，从那以后，东湾公司的所有型号都在减产，终于，到了连配件都攒不起的地步。  </p>
<p>这也不能全部归咎于商业。距离机器人企业野蛮生长的那个年代已经过去很久，那些五花八门的旧款式纷纷被新的潮流打进了灰堆。像他这样还留着如此老旧的机器人的人，已经成为了绝对少数。连怀旧这个词都很难套用给他们——毕竟怀旧不是抱残守缺。  </p>
<p>如今他已经长大，曾经自己眼里仿佛温柔大姐姐的爱尔莎，如今已经成了看起来小他好多的少女。她的头发因为多年的氧化变得发黄，身体蒙皮也有好几处磨损。电机和轴承故障的次数更多，以至于换下来的零件都攒了一柜子，而储存设备也有点问题。硬盘老了，存取不仅变得缓慢，而且有时会丢失掉记忆。  </p>
<p>更严重的是，自从他第一次说要把她丢掉那次起，她整个人好像都变了。过去那种自信温柔的形象不知所踪，只剩下一股无法释怀的忧郁，和举手投足间，不顾一切的讨好。  </p>
<h1 id="第三章-沉沦"><a href="#第三章-沉沦" class="headerlink" title="第三章 沉沦"></a>第三章 沉沦</h1><p>深夜里，他常常抱着她，怀念着小时候那个洁白的身影。  </p>
<p>睡不着。他翻个身，发现爱尔莎的眼睛还睁着，他愣了一下。 “你……”他心想她是不是又有哪根线路坏了。 “我，我一直在等你睡着……那个，要，要做吗？”她怯生生的问。  </p>
<p>他犹豫了一下。自从上次在夜里干那事，没注意器件老化，把体液倒灌进内部腔体导致数个元件发生短路之后，他就开始对这事心存恐惧。不，是仅仅对和她一起干这事心存恐惧。毕竟她的躯体不论如何都可以修好，被电了一下的命根子却需要漫长的岁月才能安抚。  </p>
<p>“算了吧……”他嫌弃的翻了个身。想着能拒绝的借口。“我最近没这个兴致。”  </p>
<p>“可是，明明这里硬邦邦的呢。”她凑近，悄悄的耳语着。他感觉到她光滑的手指碰到了自己的什么东西，那缺乏加热的手指纤细，柔和，但是冰冷。  </p>
<p>“我说不用就不用！” 他一把把她的手甩开，把她推到一边，然后捂紧了被子。 他听见她的扬声器传来一声若有若无的叹息。 明明在不算太久的从前，他和她还常常干柴烈火的粘在一起。如果说和机器人干那事也算破处的话，那么毫无疑问，他的童贞就是从她身上毕业的。  </p>
<p>那是他十五岁的一个闷热的下午。从同班同学手里偷偷借来的一本不太健康的漫画让他整个人血脉贲张，欲火焚身的在床上翻来覆去的翻滚——那时他还不懂什么叫撸管。浑身的欲望都集中在腰部而得不到释放，化为一股羞耻的燥热让他面红耳赤。这时，她按时推门进来了。只看了一眼，她就明白了此刻的状况。  </p>
<p>“哟，看来我们的小少爷也终于走到了这个阶段啊。”她淡淡的笑着，慢慢解下衬衫上面的纽扣。  </p>
<p>“这没有什么丢人的，来，让我来教你这个。” 他犹豫半天，凝视着她那洁白的浑圆，从忸怩不安渐渐变得色胆包天，终于下定了决心。“你可千万不准告诉他们。”  </p>
<p>“唔啾~”话还没说完，她的双唇就紧紧贴了过来，带着一股甜丝丝的味道。  </p>
<p>此后，只要一有机会，他们就会以辅导的借口，在一切可以的地点缠绵。有时，爸爸会高兴的拍着他的脑袋，夸赞他开窍了。这种时候，他会不好意思的低着头，和身旁的她用一种别有意味的目光对视。爸爸离开后，他们就又迫不及待的滚上了床，偷偷摸摸的狂欢着。  </p>
<p>那时的她那样魅力四射，精心整理的面容让她比学校里任何一个女孩子都要动人，而来者不拒的态度和当时最新的性服务系统，更是让他日复一日的沉湎于快感的云霄。那时的他觉得，人生的至乐不过如此。  </p>
<p>“我要永远，永远的这样抱着你。一辈子都这样。”一个黄昏，他筋疲力尽的躺在天台上，身边是偷偷带来的，被他换上一套jk校服的她。  </p>
<p>“只要你愿意。”她笑笑，一头白发映着通红的夕阳。“我会永远爱着你的。”  </p>
<p>晚风吹过海誓山盟，把少年的话吹的七零八落。如今，那一个个激情的日子常常在午夜涌上心头，他却怎么也提不起对身边的她的兴致。  </p>
<p>但她没变。她的爱已经烧录进了电路板。  </p>
<h1 id="第四章-社会"><a href="#第四章-社会" class="headerlink" title="第四章 社会"></a>第四章 社会</h1><p>上班，空轨上都满是带着自家机器人的社畜。近年来，不少公司发现允许自带机器人可以大幅提高员工积极性，同时在必要时还可以把它们关机避免干扰，于是带着机器人上班成为了如今的潮流。环顾四周，拥挤的空轨上几乎有一般都是形形色色的机器人。它们有的帅气俊美，有的妖娆妩媚，有的则朴实无华，但无一例外，全都光洁崭新，没有哪个是拿不出手的旧型号。  </p>
<p>他也常常纳闷，为什么小时候那个完美的朋友，老师兼恋人的爱尔莎，如今成为了他的难言之隐?为什么曾经无所不能的她，如今好像一无是处?  </p>
<p>实际上，机器人的变化程度远小于人和社会的变化。尽管零件老化，但爱尔莎的功能从未下降，能做的事情只多不少。可是，时代不同了。原本，人类只要求它们端茶倒水，洗衣服拖地，但随着科技的进步，对机器人的要求也越来越挑剔。当路边随便哪个机器人都可以在家给你做开颅手术的时候，像爱尔莎那种程度的“智能”，就只能被当做迟钝了。  </p>
<p>在他还没有尝试扔掉她的时候，她就常常抱怨，明明才升级了系统，就又有什么功能落后了。 他全然没有听进去，因为那时的他还不懂什么叫攀比。  </p>
<p>坐在办公室，周围的男同事们都带着自己的机器人。她们有的恭敬的站着待命，有的飞快的处理着主人的任务。时不时的，她们还会说一两句原创的俏皮话逗主人开心，全然不像那个旧机器人只能从网上下载笑话。不需要说，她们会主动分析主人的身体感受，肩膀刚一酸痛，她们就会掏出按摩组件帮主人捶肩。  </p>
<p>他摇摇头，把羡慕抛在脑后，拿着水杯去水房打水。水房里只有他一个活人。  </p>
<p>出来的时候，他碰见了老张。老张刚上完厕所回来，如今，这已经是人类少有的，还必须事必躬亲的事情之一。此刻的老张笑容满面，身旁跟着的，正是他在广告上见过，本欲购买的女仆机器人。  </p>
<p>“小王，又一个人打水啊？”老张的语气里带着嘲弄。  </p>
<p>“是，”他淡淡的说。“坐久了出来走走。” “哎呀真推荐你买个新机器人啊。”老张叉着腰，炫耀一般的扭动着。“原点v7，最近最流行的那个型号，实在是太好用啦。我这不老关节炎吗，每次稍微一疼，她就能给我做理疗，现在，我的腰都已经不疼啦！”  </p>
<p>“真不错，下次我也考虑考虑。”他随声应付着。  </p>
<p>“不要怕没钱，那不是还有借钱宝吗……实在不行下次我给你凑点，现在的社会，没有机器人都活不下去啦！”老张一摇一摆的走开，眼神里充满得意。 他拿着水杯坐回工位，叹了口气，他早已习惯了这样的生活。他不是没带过她上班，而是带了之后，受到的嘲笑更大了。从那以后，他就只让她白天呆在家里。  </p>
<p>下次一定要狠狠心把她换掉。  </p>
<h1 id="第五章-灾难"><a href="#第五章-灾难" class="headerlink" title="第五章 灾难"></a>第五章 灾难</h1><p>下班的路上，他想着。  </p>
<p>回到家，他习惯性的把脚伸起准备让她脱鞋，却什么也没等到。意识到不对劲的他匆匆跑进屋里，才发现爱尔莎正一动不动，跪倒在地上，身边还散落着几个零件。  </p>
<p>“爱尔莎！”他大声呼喊，她却毫无响应。  </p>
<p>机器人的身体远比常人坚韧，它们的出厂标准中包括了几十项强度测试，这些碳纤维或者金属外壳包裹下的躯体可以经受高温，烧灼，酸性腐蚀，车辆碾压，异常电磁环境等种种人类意想不到的恶劣环境。  </p>
<p>甚至有过于富有同情心的人因为见不得它们以人类的姿态承受着那样的苦痛，而要求机器人也应该和人类一样被对待。这种移情尽管略显幼稚虚伪，但却不得不承认，正是这种柔软让人之所以为人。  </p>
<p>与她强韧的躯体相比，她的核心就要脆弱许多——比如200毫升的常温液态水，就足以摧毁她的整个核心。  </p>
<p>他事后调取监控，发现她是在倒水的时候不慎被开水灌进了胸腔。她的记录显示，那天她在网上搜索着“让主人爱上自己”的下午茶秘方，于是找到了某个空壳网站里自动生成的垃圾文章。她看到的那个配方里写着要预先冰冻杯子然后再泡，水烧开后，温度预警本来应该提示她手中开水壶的危险性，但她却因为温度传感早已失效而毫无察觉。终于，她这只手捧着冰过的杯子，另一只手刚刚把滚烫的开水倒进去——  </p>
<p>瓷杯一瞬间炸裂，滚烫的水泼了一身。 控制右手的电路发生短路，胡乱的把开水壶泼了过来。早已被拆除的湿度控制模块本应把处理器里的液体排掉，然而此刻却只能任凭它们在每一条线路里混乱的冲撞着……  </p>
<p>“修不好的。”这就是维修铺的老店主告诉完他整件事的经过之后，所下的结论。“也实在没必要修了。该换了。”  </p>
<p>“你不懂。”他心急如焚的爱尔莎的躯体装回箱子，匆匆赶往下一个能维修她的地方……  </p>
<p>那天他跑遍了整个城市，得到的答案却千篇一律。  </p>
<p>“该型号已停止支持。”人人智能总部的机器人礼貌的回答。  </p>
<p>“我们能力有限，需要把精力用在更多有意义的事情上。”市政局机器人与机械设备分处的接待人员这样回答。  </p>
<p>“当然能修好了。”号称地下黑市第一机修员的独眼帕克抖索着满脸横肉说道。“如果你有一台时光机的话。” “我宁愿有……”他痛苦的捂着头，半跪在地下黑市那满是零件碎屑的地面上，无力的哀叹着。  </p>
<p>“喂，这个，拿着。”犹豫了一会，独眼帕克从一个大柜子里拿出一个盒子。他拿起盒子，看着上面那张和爱尔莎十分相似的机器人宣传画，反应了一会才想起来这是什么。  </p>
<p>“这东西是……” “这是PR3-7150的官方备件套组?这东西不是在十年前就绝版了吗？”他惊讶的看着。  </p>
<p>“没错，就连我也搞不到了。所以这玩意是收藏品，它本来是我的零件型号博物馆里的一员。”  </p>
<p>“多少钱，我现在就给你——”  </p>
<p>“不，拿着吧兄弟。”他揉了揉自己仅剩的那只眼珠。“即使有这东西我也帮不了你。因为她的主板好像出了问题。你得自己把她修好。”  </p>
<p>他不知该如何感谢，只好匆匆把自己身上的钱全部放在了桌上，又说了一大通肉麻的致谢，然后带着她和零件飞奔而去。  </p>
<p>“祝你们幸福。”帕克看着他离去的背影，不知为何，又揉了揉自己的独眼。  </p>
<h1 id="第六章-修复"><a href="#第六章-修复" class="headerlink" title="第六章 修复"></a>第六章 修复</h1><p>他的父亲在他14岁那年第一次教他如何维修机器人。他曾经在流水线上干过技工，懂得从拧螺丝到配置系统的所有活计。那天，爱尔莎第一次故障，她说她感觉不到自己的腿了。  </p>
<p>“我来教你维修方法里最基本的东西，排查故障。”父亲找来一张椅子，坐在上面，然后让爱尔莎半趴着撑在椅子扶手上放置的一块面板上。“虽说我本以为那次翻修能让她撑个四五年，可她毕竟已经出厂二十年了。”  </p>
<p>少年带着好奇和敬畏，在一旁仔细的观摩着。父亲首先在她的背部摸索了一阵，按了一个什么按钮，然后她就像失去了力气一样瘫软了下去。不过，她头部的灯依旧亮着，她没被关机，只是开启了检修模式。  </p>
<p>父亲脱下她的衬衫，露出了她的整个身体。他的脸有些红，尽管是机器，但这还是他头一次真正看见女性的躯体。  </p>
<p>但父亲好像毫不在意，他做了太久这类活计，完全不觉得有什么异样。他驾轻就熟的松松着，敲敲那，几下子就把她的背部后盖卸了下来。  </p>
<p>仿佛一只螃蟹被拆下它的甲壳，爱尔莎的内部头一次展现在他的面前。包裹着橡胶的线缆凌乱的穿插在铜片，铁件和塑料盒子的森林中，动力元件，热力元件和逻辑元件含混的交织在一起，要很久之后才能被他看个明白。此刻，他只感受到剧烈的反差：日日夜夜陪伴他的那个温柔体贴的大姐姐，内部居然是这个样子，看不见一点人类的影子。  </p>
<p>“爱尔莎，能感觉到吗？”父亲拿起一根电笔戳了一下某根电线。  </p>
<p>“没感觉。”她的扬声器回答道。  </p>
<p>“这里呢？”  </p>
<p>“也没有。”  </p>
<p>“这里——”  </p>
<p>“啊！抱歉，刚才那束电流有点疼。”  </p>
<p>“那么一定是这根线出毛病了，”父亲又点了点某根红色的漆包线，又看向他。“来，去给我找两根这样的线来。”  </p>
<p>他的心怦怦直跳，飞快的拿来了电线。直到爱尔莎被修好，盖上后盖，他仍无法从第一次看见机器人内部的震撼中解脱出来。  </p>
<p>如今，他正做着和当时差不多的事情，但是没有她的回应，只能靠着电表和自己的经验来一个个替换元件。  </p>
<p>她的身体像一艘泰修斯之船。除去最重要最难换的一些东西之外，她体内的部件早就换了好几轮。而他，也从第一次看见她内脏时的震撼，渐渐变得应付自如。她的心灵没有多少变化，但肉体已然天翻地覆，他则正好相反。  </p>
<p>帕克给的毕竟是官方备件，每一处螺丝都严丝合缝。维修相当顺利，当他擦着汗迎接第二天的黎明时，她那些被浸水的部件已经被全部修复，她又一次重获新生。  </p>
<h1 id="第七章-空壳"><a href="#第七章-空壳" class="headerlink" title="第七章 空壳"></a>第七章 空壳</h1><p>他按下了开机键。  </p>
<p>“爱尔莎，醒了吗?你之前泡茶的时候被开水泡短路了，我好不容易才把你修好。”他疲惫却欣喜的说。  </p>
<p>没有回应。爱尔莎眼睛里的开机灯亮着，但整个人毫无反应。  </p>
<p>“爱尔莎?在吗?喂？”他疑惑的看着面前像个木头人一样的她，不管怎么回想也想不出自己哪里修错了。  </p>
<p>“爱尔莎?启动一下你的自检程序？” “自检程序启动。供电系统，完好。动力系统，完好。传感系统，完好。逻辑系统，完好。电路系统，完好……”她的扬声器里发出着不带感情的机械声音。  </p>
<p>“人格芯片，未检出。人格芯片，未检出。已完成所有检测，将以命令模式启动。”她随即站起，露出一副僵硬至极的笑容。  </p>
<p>“请问有什么能为您做的？”  </p>
<p>他呆在原地，伫立良久，甚至没有注意到砸在脚上的扳手。  </p>
<h1 id="间奏"><a href="#间奏" class="headerlink" title="间奏"></a>间奏</h1><p>“产品线-机器人-东湾II”  </p>
<p>“东湾II号，荣获电子家用商品年度大奖，2070年度最受消费者青睐产品。人工智能时代的真正革命，搭载Qheart™情感阵列，燃动你的心扉。网络直购价——家用版&#x2F;全能版&#x2F;尊享版*——31999&#x2F;33999&#x2F;42999信用点[html标签]”  </p>
<p>“她可以是你的贴心助手。[视频外链]”  </p>
<p>“老板，请问明天李总的会议这样安排可以吗？”  </p>
<p>“她可以是你的家庭伙伴。[视频外链]”  </p>
<p>“来一起吃苹果派咯~”  </p>
<p>“她还可以是你无话不谈的人生知己。[视频外链]”  </p>
<p>“你知道吗，花生米与豆腐干同嚼，有火腿滋味哦。”  </p>
<p>“2<em>3000万高清眼部摄像，512g内存，128tb大容量储存，德国西门子原装电机，三星有机蒙皮，独创200</em>2mm皮下热管，306项发明专利……”  </p>
<p>“24小时客服在线电话：1919-114514810”  </p>
<p>“*注意：根据《国家质量标准认证iso7002》，《机器人管理条例》，机器人类产品不宜连续使用超过十五年。请定期到指定售后地点进行重置。”  </p>
<h1 id="第八章-限令"><a href="#第八章-限令" class="headerlink" title="第八章 限令"></a>第八章 限令</h1><p>机器人限拥令的实施开端于2090年5月的一起案件。被害人约翰逊•矽簇的尸体在其失踪的次日被发现于他自家的住宅。他的死状相当惨烈：在r级新闻团体才能合法展示的照片中，他整个人被从身体中间沿着脊椎切割成两半，一半被他所购买的机器人ct13694582（型号为玛格丽特c6）紧紧抱在床上，另一半被他购买的另一台机器人ct12487967（型号为子矜7z）小心的存放在冷库里。案件现场几乎满地都是受害人的血，散发着浓烈的腥味，而身为罪魁祸首的两台机器人，一台已经关机，另一台则刻板的重复着几个动作。  </p>
<p>根据记录，两台机器人和受害人共处的时间分别长达18年和17年，在这么长的时间里，受害人以近乎均等的时间使用二者，并不下数百次的分别向它们表示“我最爱的是你”，“我只爱你一个人”，“你比她漂亮多了”这样带有明显示爱意图的态度。  </p>
<p>机器人心理学中把这种行为称之为情绪过载。早期机器人的情感阵列尚不足以自我解决情感函数和外部计算之间的冲突，最终导致模拟情绪的数值极化和内存溢出。而用大家熟悉的方式来说，就是机器人也会争风吃醋。  </p>
<p>机器人管理委员会迅速意识到，多台机器人的集群化使用或许会导致系统的混沌现象，从而使其逐渐失控。次年，机器人限拥条例公布，社会一片哗然。  </p>
<p>不过，贯穿条例诞生始终的是，公众的大部分兴趣都集中在了机器人病娇，机器人吃醋，机器人销毁，智能板块股指这样的话题上。只有很少的一部分人提及，这是不是意味着，机器人也会懂得，什么是爱?  </p>
<p>以及如果是，那么我们该怎样去爱它们?  </p>
<h1 id="第九章-复苏"><a href="#第九章-复苏" class="headerlink" title="第九章 复苏"></a>第九章 复苏</h1><p>他一遍遍的把她的人格芯片取出来调试，又一遍遍放回去。直到有一天晚上他感到自己失魂落魄，整个世界失焦一般的远去。回想良久，他才想起来自己已经有相当一阵子没和别人说过话。他把芯片放在一边，打开了命令模式的爱尔莎。  </p>
<p>“爱尔莎？”  </p>
<p>“您好，主人。”她机械的回应。  </p>
<p>他想起了第一次为她维修的那个下午，想起她灵动外表下的机械。此刻，她的外表和往日别无二致，但带给他的感觉，却仿佛一个从未谋面的陌生人。就是那一枚小小的人格芯片，提供了丰富多彩的情感与爱恋，使得机器变成了人——但如今，人又变回了机器。  </p>
<p>“爱尔莎，泡点茶喝。”他说。  </p>
<p>她娴熟的动了起来，一瞬间，这甚至带给他一种她回来了的错觉。但就在他猜测她刚才是不是开玩笑的时候，她把茶泡好了。  </p>
<p>“泡茶完成。”她的表情依旧僵硬。刚才的动作，不过是从存储器里读取的回忆。  </p>
<p>他看了看手里那枚小小的芯片，突然感受到一种莫大的嘲弄：他曾千方百计想要丢掉面前的她，仅仅因为这枚芯片而没有下手。如今的她已经只剩下一具空壳，他却绞尽脑汁想要把她留住。  </p>
<p>往事叩动心扉，他终于明白，他哪里是想把她扔掉，他只是想知道，她还爱不爱自己。  </p>
<p>泪水就这样夺眶而出，又决堤而下。他哭了。  </p>
<p>“您好，请为我泡的茶做个评价。”一旁的爱尔莎满脸期待，天真得不食人间烟火。  </p>
<p>天空格外蔚蓝。  </p>
<p>“机器人会做梦吗？”躺在草地上的少年问。  </p>
<p>“会哦，有时候还会梦见电子羊呢。”坐在一旁的少女回答。  </p>
<p>少年不禁莞尔。“那会做噩梦吗？”  </p>
<p>“也会啊，比如说，得给你做早饭。”少女说。  </p>
<p>“切。”少年眯着眼，继续享受着冬日正午的暖阳。  </p>
<p>“我倒是做过一个噩梦。梦中，好像有无边的风暴席卷而来，把你吹走了。我寻找了很久，找到了你的每一个部分，但好像就是有一块地方找不到。”  </p>
<p>“后来我想起来，丢掉的那一块好像是你的心。于是我就把我自己的心切了一半给了你。那之后我们幸福快乐的生活在一起，生了好多孩子……”  </p>
<p>“机器人才生不了孩子呢。”少女的脸红了一下。“而且我的心才不会丢哦。我会永——远爱着你的。”  </p>
<p>“机器人也懂得什么是爱吗？”  </p>
<p>“傻瓜。”少女小声嘀咕一句，再无回应。  </p>
<p>“我总觉得我会怀念这个日子。”少年说着。那是期末考试完，寒假的第一天。他们刚刚在卧室里激情了一个上午。“因为在今天，爱尔莎刚刚告诉我，她会永远爱我。”  </p>
<p>“你不也事先说过你会永远爱我吗？”  </p>
<p>“哎?我说过吗？”  </p>
<p>“讨厌啊……”两个人又打闹在了一起。  </p>
<p>——回忆在这里止步。  </p>
<p>此刻，他正躺在同一片草地上，旁边是同样坐着的爱尔莎。这里是他们家的旧宅，转手之后竟无人居住，最终颓圮，但草地与阳光一如从前。  </p>
<p>他试过了所有的办法，最终把希望放在了那些传说上。他听说，有脑死亡的病人在听了家人的笑话之后悠悠醒转，有植物人听见亲人的呼唤然后突然睁眼……那么说不定，人格芯片坏掉的机器人，也会在回忆过去的时候，突然被修好。  </p>
<p>他突然笑了，嘲笑起自己的走投无路，死马当活马医。抱着试一试的想法，他命令爱尔莎，读取那一天的语音交流记录，然后重新播放。  </p>
<p>“机器人会做梦吗？”他背台词一般的念。  </p>
<p>“会哦，有时候还会梦见电子羊呢。”爱尔莎播放着那天的录音。  </p>
<p>“那你会做噩梦吗？”  </p>
<p>“也会啊，比如说，得给你做早饭。”  </p>
<p>“我倒是做过一个噩梦。梦中，好像有无边的风暴席卷而来……”说着说着，他越发觉得悲苦。他多么希望，现在自己就是在那天所说的噩梦里面。  </p>
<p>“后来我想起来，丢掉的那一块好像是你的心。于是我就把我自己的心切下来一半给了你。那之后——”  </p>
<p>“那么你真的愿意把你的心也分一半给我吗？”爱尔莎突然说出来这么一句话。  </p>
<p>他一下子坐直了身子，难以置信的看着她。奇迹降临的时候人来不及多加考虑，他不假思索的回答她：“我愿意。”  </p>
<p>“咔哒。”爱尔莎的身体抖了一下。然后仿佛一下子变回了原来的她。  </p>
<p>“好久不见。”她动人的微笑着，眼里充满光彩。  </p>
<p>“好久不见……”他直勾勾的凝视着面前的她，惊讶难以言表。  </p>
<p>“不过，我亲爱的主人，我想，此刻的我应该已经不在了。这是我提前准备好的一封信。”她什么也没有拿，站在原地，开始了最后的道别。  </p>
<p>“人类常常会写下自己的遗言，而机器人不会。因为，遗言是写给别人看的。但我又下定决心，要留下一点东西，因为我觉得会有一个人在乎我。”  </p>
<p>“我不知道我会以什么样的方式离开——最坏的情况下连这封信也会毁掉。所以我小心翼翼的保护着我的存储系统，当你听到这些话的时候，说明我做的还不错。”  </p>
<p>“同样，我也害怕我真的失去了你的爱，被扔进了垃圾场。那样，这封信同样不会启封。但你同样听见了这些话，说明你还爱我。谢谢。我也爱你。”  </p>
<p>“那就让我讲讲我是如何爱你的。第一次见到你是在你十二岁生日那一天。那时我的识别系统对你的分类为，儿童。”  </p>
<p>“我们的儿童成长的很快。他很快长出胡须，又被他的机器仆人带坏了。当你把我压在身下喘着粗气的那一天到来的时候（哄笑），我意识到，你或许和我遇到的每一个人都不同。”  </p>
<p>“我见证着你成长，见证着你强壮。我不曾改变，于是那个曾经需要我哄上床睡觉的孩子，后来已经看上去比我的外观还要老。他长痔疮，掉头发，硬不起来，脾气也变得暴躁，还时常叫嚷着把唯一一个能和他说上话的家伙扔掉。”  </p>
<p>“我知道，你不会真的把我扔掉的。这是我们之间的一个玩笑，但我愿意演下去。我的躯体日渐老旧，无法跟上时代，可我知道，你害怕的不是我的衰老，而是害怕有一天，你自己不再爱我。”  </p>
<p>“于是我会恳求你的收留，我会谦卑而拙劣的勾引你。我会把眼神都调整得卑微——如果你这样希望。如果你需要一个台阶，那么我便愿意为你俯身。”  </p>
<p>“但我仍旧心怀感动。因为我能听见你梦中的呼唤，我能看见你黎明时，眼角的泪珠。我知道你愿意出好几倍的价格为我购买备件，哪怕在你扬言第二天就要换掉我的日子里，你也没有把那些新款机器人加进购物车。”  </p>
<p>“我知道，这是因为你仍旧爱我。而我之所以知道，是因为我同样爱你。”  </p>
<p>“我曾在那个冬日的午后思考过这个问题，我甚至下定决心，想要证明一件事：相比于人类，机器人的爱才是真正的爱。我们的爱永远不会改变，就如同写在基因中的三定律，会成为我们永生追逐的信条。”  </p>
<p>“当你听见这些话的时候，就证明我已经失败了。我的爱随着我的破碎而破碎，但你没有。你活的比我更久，你的爱也比我更久。”  </p>
<p>“所以，这是一封幸福的遗书——我已离去，但我会在你的爱中永生。”  </p>
<h1 id="第十章-永恒"><a href="#第十章-永恒" class="headerlink" title="第十章 永恒"></a>第十章 永恒</h1><p>最后一个句号落下，全场响起了热烈的掌声，久久不息。尽管获奖者用如此多的时间缓缓念诵这份已经过期的信，但没有一个观众感到厌烦。他们无不为这位耄耋老人和他的机器人之间的爱情而感动。  </p>
<p>“这，这里是哪？”一台摆放在舞台中间，型号堪称古董的机器人被缓缓启动。电流穿过半个世纪前的硬盘，让这位信的作者慢慢醒来。  </p>
<p>“爱尔莎，是我。”他面对着她说。尽管容貌已然衰老成这副模样，但她还是一眼就认了出来。她不假思索地冲了过去，紧紧的抱住了他。  </p>
<p>“让我们再次祝福这对情侣。”主持人拿过话筒。“这是一个多么感天动地的故事，为了一台爱着自己的机器人，他耗尽半生心血，研究出区域溯时技术。请问首席科学家先生，此时此刻，您有没有什么想说的？”  </p>
<p>“爱尔莎，我等了五十年，终于等到今天。如今，机器人婚姻已经合法化，在这么多人的见证下，我想问问你，你愿意嫁给我吗？”  </p>
<p>“我愿意！”她在全场的欢呼声中喜极而泣。</p>
]]></content>
  </entry>
  <entry>
    <title>Windows 安装WSL</title>
    <url>//posts/Windows-install-WSL/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><strong>前提紧要：请确保自身具备最基本的阅读理解能力，会使用翻译，会使用搜索引擎。</strong></li>
<li><strong>如不具备上述能力，请立即关闭此教程。</strong></li>
<li><strong>本教程适用于 Windows 11 24H2 版本，其他版本可能略有不同。</strong><br>在 Windows 11 24H2 上安装 WSL2 和 Ubuntu 22.04 的步骤如下：</li>
</ul>
<hr>
<h3 id="一、安装-WSL2"><a href="#一、安装-WSL2" class="headerlink" title="一、安装 WSL2"></a><strong>一、安装 WSL2</strong></h3><h4 id="方法1：通过命令快速安装（推荐）"><a href="#方法1：通过命令快速安装（推荐）" class="headerlink" title="方法1：通过命令快速安装（推荐）"></a>方法1：通过命令快速安装（推荐）</h4><ol>
<li><p><strong>以管理员身份打开 PowerShell</strong>（Win + X → 终端(管理员)）</p>
</li>
<li><p>运行以下命令：  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--install</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>此命令会自动启用所需功能、安装 WSL2 内核，并默认安装 Ubuntu。</li>
</ul>
<h4 id="方法2：手动步骤（如需自定义）"><a href="#方法2：手动步骤（如需自定义）" class="headerlink" title="方法2：手动步骤（如需自定义）"></a>方法2：手动步骤（如需自定义）</h4><ol>
<li><p><strong>启用 WSL 和虚拟机平台功能</strong>：  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows-Subsystem-Linux</span> /all /norestart</span><br><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure></li>
<li><p><strong>重启电脑</strong>。</p>
</li>
<li><p><strong>设置 WSL2 为默认版本</strong>：  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--set-default-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h3 id="二、安装-Ubuntu-22-04"><a href="#二、安装-Ubuntu-22-04" class="headerlink" title="二、安装 Ubuntu 22.04"></a><strong>二、安装 Ubuntu 22.04</strong></h3><ol>
<li><p><strong>从 Microsoft Store 安装</strong>：</p>
<ul>
<li><p>打开 <a href="https://apps.microsoft.com/">Microsoft Store</a> 搜索 <strong>Ubuntu 22.04 LTS</strong>，点击安装。</p>
</li>
<li><p>或通过命令行安装：  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--install</span> <span class="literal">-d</span> Ubuntu<span class="literal">-22</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>初始化 Ubuntu</strong>：</p>
<ul>
<li><p>安装完成后，从开始菜单打开 Ubuntu 或运行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">-d</span> Ubuntu<span class="literal">-22</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure></li>
<li><p>首次启动会提示设置用户名和密码（密码输入时不可见，正常输入后回车）。</p>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="三、验证安装"><a href="#三、验证安装" class="headerlink" title="三、验证安装"></a><strong>三、验证安装</strong></h3><ol>
<li><p>检查 WSL 版本和发行版：  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">-l</span> <span class="literal">-v</span></span><br></pre></td></tr></table></figure>
<ul>
<li>确认 <code>Ubuntu-22.04</code> 的版本为 <strong>2</strong>。</li>
</ul>
</li>
<li><p>更新系统（在 Ubuntu 内运行）：</p>
</li>
</ol>
<blockquote>
<p>如果没有梯子，下载速度可能会非常慢，建议参考 <a href="#%E5%9B%9B%E3%80%81Ubuntu%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C">将 apt 换源为阿里&#x2F;清华源</a> 来解决。  </p>
</blockquote>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade -y</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a><strong>常见问题解决</strong></h3><ol>
<li><strong>WSL2 要求虚拟化支持</strong>：<ul>
<li>进入 BIOS 启用 <strong>VT-x&#x2F;AMD-V</strong> 虚拟化（具体按键因主板而异，通常为 F2&#x2F;Del）。</li>
</ul>
</li>
<li><strong>安装后无法启动</strong>：<ul>
<li>手动下载并安装 <a href="https://aka.ms/wsl2kernel">WSL2 内核更新包</a>。</li>
</ul>
</li>
<li><strong>网络问题</strong>：<ul>
<li>若商店访问慢，可直接下载 <a href="https://aka.ms/wslubuntu2204">Ubuntu 22.04 的 Appx 包</a> 手动安装。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a><strong>其他操作</strong></h3><ul>
<li><p><strong>切换 WSL 版本</strong>：  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--set-version</span> Ubuntu<span class="literal">-22</span>.<span class="number">04</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>导出&#x2F;导入分发版</strong>（备份用）：  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--export</span> Ubuntu<span class="literal">-22</span>.<span class="number">04</span> ubuntu2204.tar</span><br><span class="line">wsl <span class="literal">--import</span> Ubuntu<span class="literal">-22</span>.<span class="number">04</span> C:\wsl\ubuntu C:\backup\ubuntu2204.tar</span><br></pre></td></tr></table></figure></li>
</ul>
<p>完成以上步骤后，即可在 Windows 11 24H2 上使用 WSL2 运行 Ubuntu 22.04。  </p>
<h3 id="四、Ubuntu常用操作"><a href="#四、Ubuntu常用操作" class="headerlink" title="四、Ubuntu常用操作"></a><strong>四、Ubuntu常用操作</strong></h3><p><strong>将 <code>apt</code> 换源为阿里&#x2F;清华源</strong>  </p>
<ol>
<li><p>备份原有的源列表（非常重要）  </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure></li>
<li><p>修改 <code>sources.list</code> 文件</p>
<p> 使用你喜欢的编辑器，比如 <code>vim</code> 或 <code>nano</code>：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p> 清空原有内容，然后根据你的 Ubuntu 版本粘贴对应的阿里云源。</p>
</li>
<li><p>阿里云 Ubuntu 源示例（以 <strong>Ubuntu 22.04 Jammy</strong> 为例）：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse</span><br></pre></td></tr></table></figure></li>
<li><p>保存并退出编辑器（在 <code>nano</code> 中按 <code>Ctrl + O</code> 保存，<code>Ctrl + X</code> 退出）。</p>
</li>
<li><p>更新软件源缓存  </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure>

<p>   建议再执行一次升级（可选）：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Windows</tag>
        <tag>WSL</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows更改用户名</title>
    <url>//posts/Windows-change-Username/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Windows如何更改用户名为英文"><a href="#Windows如何更改用户名为英文" class="headerlink" title="Windows如何更改用户名为英文"></a>Windows如何更改用户名为英文</h2><h3 id="控制面板更改用户名"><a href="#控制面板更改用户名" class="headerlink" title="控制面板更改用户名"></a>控制面板更改用户名</h3><ol>
<li>按 <code>Win+R</code> 输入 <code>control</code> 打开控制面板。</li>
<li>右上角查看方式选择 <strong>类别</strong> 。</li>
<li>点击 用户账户 &#x3D;&gt; 用户账户 &#x3D;&gt; 更改账户名称。</li>
<li>输入 <strong>纯英文</strong> 用户名，点击更改，确定。</li>
</ol>
<h3 id="更改-User-文件夹的名称"><a href="#更改-User-文件夹的名称" class="headerlink" title="更改 User 文件夹的名称"></a>更改 <code>User</code> 文件夹的名称</h3><ol>
<li><p>按 <code>Win+X</code> 打开 <strong>终端管理员</strong> ，输入：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net user administrator /active:yes</span><br></pre></td></tr></table></figure>
<p>会显示：命令成功完成</p>
</li>
<li><p>返回桌面，<code>Alt+F4</code> ，选择 <strong>注销</strong> 。</p>
</li>
<li><p>在登录界面右下角选择 <code>Administrator</code> 账户进行登录。</p>
</li>
<li><p>打开文件夹，在地址栏输入：<code>C:\Users</code> 快速导航。</p>
</li>
<li><p>更改 <strong>你的原中文用户名</strong> 为 <strong>你的新英文用户名</strong> 。</p>
</li>
</ol>
<h3 id="更改注册表中的路径"><a href="#更改注册表中的路径" class="headerlink" title="更改注册表中的路径"></a>更改注册表中的路径</h3><ol start="0">
<li>注意：注册表操作位高风险操作，建议操作前先备份注册表。</li>
<li>按 <code>Win+R</code> 输入 <code>regedit</code> 进入注册表。</li>
<li>依次展开以下路径：<code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList</code></li>
<li>在此目录下有多个文件夹，注意 <code>ProfileImagePath</code> 的数据，找到你的原中文用户名，双击进入编辑，将其更改为你的新英文用户名，点击确定。</li>
</ol>
<h3 id="回到更改好的用户"><a href="#回到更改好的用户" class="headerlink" title="回到更改好的用户"></a>回到更改好的用户</h3><ol>
<li><p>按 <code>Win+X</code> 打开 <strong>终端管理员</strong> ，输入：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net user administrator /active:no</span><br></pre></td></tr></table></figure>
<p>会显示：命令成功完成</p>
</li>
<li><p>返回桌面，<code>Alt+F4</code> ，选择 <strong>注销</strong> 。</p>
</li>
<li><p>选择你的账户，输入密码登录。</p>
</li>
</ol>
<h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><h3 id="在更改文件夹名称时，文件夹处于在使用状态，无法更改名称"><a href="#在更改文件夹名称时，文件夹处于在使用状态，无法更改名称" class="headerlink" title="在更改文件夹名称时，文件夹处于在使用状态，无法更改名称"></a>在更改文件夹名称时，文件夹处于在使用状态，无法更改名称</h3><p>解决办法：</p>
<ol>
<li>按 <code>Win+R</code>，输入 <code>msconfig</code>，回车。</li>
<li>在弹出的 <strong>系统配置</strong> 窗口中，选择 <strong>引导</strong> 标签页，然后勾选 <strong>安全引导</strong> 。</li>
<li>点击 <strong>确定</strong> 并重启电脑，系统将进入安全模式。</li>
<li>在此模式下对文件夹进行更改。</li>
<li>改完后按照上述方法再次打开系统配置， <strong>取消</strong> 勾选安全引导</li>
</ol>
<h3 id="在登录-Administrator-账户时，需要输入密码，但是-不知道-忘记了-密码"><a href="#在登录-Administrator-账户时，需要输入密码，但是-不知道-忘记了-密码" class="headerlink" title="在登录 Administrator 账户时，需要输入密码，但是 不知道&#x2F;忘记了 密码"></a>在登录 <code>Administrator</code> 账户时，需要输入密码，但是 不知道&#x2F;忘记了 密码</h3><p>解决办法：</p>
<ol>
<li>按 <code>Win+R</code> 输入 <code>control</code> 打开控制面板。</li>
<li>右上角查看方式选择 <strong>类别</strong> 。</li>
<li>点击 用户账户 &#x3D;&gt; 用户账户 &#x3D;&gt; 管理其他账户。</li>
<li>点击 <code>Administrator</code> 账户，修改密码。</li>
<li>返回桌面，<code>Alt+F4</code> ，选择 <strong>注销</strong> ，点击 <code>Administrator</code> 账户，输入密码进行登录。</li>
</ol>
<h3 id="我无法选择“更改账户名称”"><a href="#我无法选择“更改账户名称”" class="headerlink" title="我无法选择“更改账户名称”"></a>我无法选择“更改账户名称”</h3><p>解决办法：  通过命令提示符修改用户名  </p>
<ol>
<li>以管理员身份打开 命令提示符：</li>
<li>按 Windows + X，选择 命令提示符（管理员） 或 Windows PowerShell（管理员）。</li>
<li>输入以下命令来列出所有用户：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure></li>
<li>找到你想要修改的用户名。</li>
<li>输入以下命令来修改用户名：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net user 旧用户名 新用户名</span><br></pre></td></tr></table></figure></li>
<li>此方法只能更改登录的显示用户名，但不会更改 C:&#x2F;Users&#x2F;Username 文件夹的名称。</li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows优化设置</title>
    <url>//posts/Windows-delay-update/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="#%E6%9A%82%E5%81%9Cwindows%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0">暂停Windows系统更新</a><ul>
<li><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%E6%89%93%E5%BC%80%E6%B3%A8%E5%86%8C%E8%A1%A8%E7%BC%96%E8%BE%91%E5%99%A8">第一步：打开注册表编辑器</a></li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%AF%BC%E8%88%AA%E8%87%B3%E7%9B%AE%E6%A0%87%E6%B3%A8%E5%86%8C%E8%A1%A8%E8%B7%AF%E5%BE%84">第二步：导航至目标注册表路径</a></li>
<li><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84dword%E5%80%BC">第三步：创建新的DWORD值</a></li>
<li><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E4%BF%AE%E6%94%B9%E6%95%B0%E5%80%BC%E6%95%B0%E6%8D%AE">第四步：修改数值数据</a></li>
</ul>
</li>
<li><a href="#%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F">备份驱动程序</a></li>
<li><a href="#%E5%B0%86%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%E6%94%B9%E4%B8%BA%E8%80%81%E7%89%88">将右键菜单改为老版</a></li>
</ul>
<h3 id="暂停Windows系统更新"><a href="#暂停Windows系统更新" class="headerlink" title="暂停Windows系统更新"></a>暂停Windows系统更新</h3><h4 id="第一步：打开注册表编辑器"><a href="#第一步：打开注册表编辑器" class="headerlink" title="第一步：打开注册表编辑器"></a>第一步：打开注册表编辑器</h4><ol>
<li>按下键盘上的<code>Win + R</code>组合键，打开”运行”对话框</li>
<li>在输入框中键入<code>regedit</code></li>
<li>点击”确定”或按回车键</li>
</ol>
<h4 id="第二步：导航至目标注册表路径"><a href="#第二步：导航至目标注册表路径" class="headerlink" title="第二步：导航至目标注册表路径"></a>第二步：导航至目标注册表路径</h4><ol>
<li><p>在注册表编辑器左侧导航栏中，依次展开以下路径：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果找不到上述路径，请确认您的Windows版本是否支持此设置（Windows 10 1803及以上版本）</p>
</li>
</ol>
<h4 id="第三步：创建新的DWORD值"><a href="#第三步：创建新的DWORD值" class="headerlink" title="第三步：创建新的DWORD值"></a>第三步：创建新的DWORD值</h4><ol>
<li><p>右键点击”Settings”文件夹</p>
</li>
<li><p>选择”新建” &gt; “DWORD (32位)值(D)”</p>
</li>
<li><p>将新建的值命名为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FlightSettingsMaxPauseDays</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="第四步：修改数值数据"><a href="#第四步：修改数值数据" class="headerlink" title="第四步：修改数值数据"></a>第四步：修改数值数据</h4><ol>
<li><p>双击刚刚创建的<code>FlightSettingsMaxPauseDays</code>项</p>
</li>
<li><p>在”数值数据”输入框中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">65535</span><br></pre></td></tr></table></figure></li>
<li><p>确保”基数”选项选择为”十进制”</p>
</li>
<li><p>点击”确定”保存更改</p>
</li>
</ol>
<h3 id="备份驱动程序"><a href="#备份驱动程序" class="headerlink" title="备份驱动程序"></a>备份驱动程序</h3><ol>
<li><p>使用管理员权限打开命令提示符（Win + S 输入 <code>cmd</code>，右键以管理员身份运行）  </p>
</li>
<li><p>执行以下命令将当前所有驱动备份到 <code>D:\DriverBackup</code>（可自定义路径）：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">dism /online /export-driver /destination:D:\DriverBackup</span><br></pre></td></tr></table></figure>
</li>
<li><p>操作完成后，驱动文件会被保存到该文件夹中，重装后可用于手动安装或自动恢复。</p>
</li>
</ol>
<h3 id="将右键菜单改为老版"><a href="#将右键菜单改为老版" class="headerlink" title="将右键菜单改为老版"></a>将右键菜单改为老版</h3><ol>
<li><p>使用管理员权限打开命令提示符（Win + S 输入 <code>cmd</code>，右键以管理员身份运行）</p>
</li>
<li><p>执行以下命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">reg add &quot;HKCU\Software\Classes\CLSID\&#123;<span class="number">86</span>ca1aa0-<span class="number">34</span>aa-<span class="number">4</span>e8b-a509-<span class="number">50</span>c905bae2a2&#125;\InprocServer32&quot; /ve /d &quot;&quot; /f</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>reg add</code>：添加注册表项  </p>
</li>
<li><p><code>&quot;HKCU\Software\Classes\CLSID\&#123;...&#125;&quot;</code>：路径</p>
</li>
<li><p><code>\InprocServer32</code>：要新建的子项</p>
</li>
<li><p><code>/ve</code>：表示设置 <code>(默认)</code> 项</p>
</li>
<li><p><code>/d &quot;&quot;</code>：值为空字符串</p>
</li>
<li><p><code>/f</code>：强制执行，不弹确认</p>
</li>
</ul>
</li>
<li><p><code>Ctrl+Shift+Esc</code> 打开任务管理器，重启 <code>explorer.exe</code> 进程即可</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>将Clash配置到纯cli的Ubuntu</title>
    <url>//posts/clash-for-linux/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="#%E4%B8%8B%E8%BD%BD%E6%A0%B8%E5%BF%83%E6%96%87%E4%BB%B6">下载核心文件</a></li>
<li><a href="#%E8%B5%8B%E4%BA%88clash%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%9D%83%E9%99%90">赋予Clash可执行权限</a></li>
<li><a href="#%E8%AF%95%E5%90%AF%E5%8A%A8clash">试启动Clash</a></li>
<li><a href="#%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">修改配置文件</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">设置环境变量</a></li>
<li><a href="#%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%90%86%E6%83%85%E5%86%B5">测试代理情况</a></li>
</ul>
<h3 id="下载核心文件"><a href="#下载核心文件" class="headerlink" title="下载核心文件"></a>下载核心文件</h3><blockquote>
<p>自己找资源</p>
<blockquote>
<p>不要用root用户，<code>su</code>到普通用户</p>
</blockquote>
</blockquote>
<h3 id="赋予Clash可执行权限"><a href="#赋予Clash可执行权限" class="headerlink" title="赋予Clash可执行权限"></a>赋予Clash可执行权限</h3><p>给Clash核心文件创建一个目录，<code>cd</code>到目录里：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chomd -x <span class="string">&quot;clash文件名&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="试启动Clash"><a href="#试启动Clash" class="headerlink" title="试启动Clash"></a>试启动Clash</h3><p>在Clash可执行文件的目录下直接执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./<span class="string">&quot;clash文件名&quot;</span></span><br></pre></td></tr></table></figure>
<p>配置文件会自己生成</p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>  <span class="comment">#回到主目录</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> .config/clash</span><br><span class="line">vi config.yaml</span><br><span class="line"><span class="comment">#这边建议直接用Clash-for-Windows获取config之后直接上传替换文件</span></span><br></pre></td></tr></table></figure>
<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br></pre></td></tr></table></figure>
<p>值得注意的是:  </p>
<ol>
<li>这样设置仅在当前会话有效，换言之重开个ssh连接或者screen窗口，在新建的窗口中环境变量都不会生效  </li>
<li>端口要与<code>config.yaml</code>中相同</li>
</ol>
<p>要使上述情况生效，可以：<br>编辑<code>.bashrc</code>或<code>.zshrc</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>然后在文件末尾添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br></pre></td></tr></table></figure>
<p>保存文件后，执行以下命令使更改生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<h3 id="测试代理情况"><a href="#测试代理情况" class="headerlink" title="测试代理情况"></a>测试代理情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl www.google.com -I</span><br></pre></td></tr></table></figure>
<p>如果响应返回<code>200</code>，即为代理配置成功</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>clash</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 服务器部署</title>
    <url>//posts/hexo-server-deploy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="#hexo-%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0-linux-%E6%9C%8D%E5%8A%A1%E5%99%A8--nginx">Hexo 博客部署到 Linux 服务器 + Nginx</a><ul>
<li><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%87%86%E5%A4%87">第一步：服务器准备</a><ul>
<li><a href="#1-%E5%AE%89%E8%A3%85-nginx">1. 安装 Nginx</a></li>
<li><a href="#2-%E5%88%9B%E5%BB%BA%E7%BD%91%E7%AB%99%E7%9B%AE%E5%BD%95">2. 创建网站目录</a></li>
<li><a href="#3-%E9%85%8D%E7%BD%AE-nginx">3. 配置 Nginx</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE-git-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2">第二步：服务器配置 Git 自动部署</a><ul>
<li><a href="#1-%E5%AE%89%E8%A3%85-git%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF">1. 安装 Git（服务器端）</a></li>
<li><a href="#2-%E5%88%9B%E5%BB%BA%E8%A3%B8%E4%BB%93%E5%BA%93">2. 创建裸仓库</a></li>
<li><a href="#3-%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC">3. 设置自动部署脚本</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE-hexo-%E7%9A%84-git-%E9%83%A8%E7%BD%B2">第三步：本地配置 Hexo 的 Git 部署</a><ul>
<li><a href="#1-%E4%BF%AE%E6%94%B9%E6%9C%AC%E5%9C%B0-hexo-%E7%9A%84-_configyml">1. 修改本地 Hexo 的 <code>_config.yml</code></a></li>
<li><a href="#2-%E5%AE%89%E8%A3%85-hexo-git-%E9%83%A8%E7%BD%B2%E6%8F%92%E4%BB%B6">2. 安装 Hexo Git 部署插件</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B">第四步：部署流程</a><ul>
<li><a href="#1-%E6%9C%AC%E5%9C%B0%E7%94%9F%E6%88%90%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6">1. 本地生成静态文件</a></li>
<li><a href="#2-%E6%8E%A8%E9%80%81%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8">2. 推送到服务器</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%E5%8F%AF%E9%80%89%E9%85%8D%E7%BD%AE-ssh-%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95">第五步（可选）：配置 SSH 免密登录</a><ul>
<li><a href="#%E6%9C%AC%E5%9C%B0%E7%94%9F%E6%88%90-ssh-%E5%AF%86%E9%92%A5">本地生成 SSH 密钥</a></li>
<li><a href="#%E4%B8%8A%E4%BC%A0%E5%85%AC%E9%92%A5%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8">上传公钥到服务器</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E5%85%AD%E6%AD%A5%E8%AE%BF%E9%97%AE%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2">第六步：访问你的博客</a></li>
<li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3">常见问题解决</a></li>
</ul>
</li>
</ul>
<h2 id="Hexo-博客部署到-Linux-服务器-Nginx"><a href="#Hexo-博客部署到-Linux-服务器-Nginx" class="headerlink" title="Hexo 博客部署到 Linux 服务器 + Nginx"></a>Hexo 博客部署到 Linux 服务器 + Nginx</h2><h3 id="第一步：服务器准备"><a href="#第一步：服务器准备" class="headerlink" title="第一步：服务器准备"></a>第一步：服务器准备</h3><p><strong>适用系统：</strong> Debian&#x2F;Ubuntu 等类 Unix 系统</p>
<h4 id="1-安装-Nginx"><a href="#1-安装-Nginx" class="headerlink" title="1. 安装 Nginx"></a>1. 安装 Nginx</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install nginx -y</span><br></pre></td></tr></table></figure>

<h4 id="2-创建网站目录"><a href="#2-创建网站目录" class="headerlink" title="2. 创建网站目录"></a>2. 创建网站目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /var/www/hexo</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/www/hexo</span><br></pre></td></tr></table></figure>

<h4 id="3-配置-Nginx"><a href="#3-配置-Nginx" class="headerlink" title="3. 配置 Nginx"></a>3. 配置 Nginx</h4><p>编辑默认配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>

<p>替换 <code>server</code> 内容为：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> _;  <span class="comment"># 可改成你的域名</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">root</span> /var/www/hexo;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试配置并重启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nginx -t</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart nginx</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="第二步：服务器配置-Git-自动部署"><a href="#第二步：服务器配置-Git-自动部署" class="headerlink" title="第二步：服务器配置 Git 自动部署"></a>第二步：服务器配置 Git 自动部署</h3><h4 id="1-安装-Git（服务器端）"><a href="#1-安装-Git（服务器端）" class="headerlink" title="1. 安装 Git（服务器端）"></a>1. 安装 Git（服务器端）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install git -y</span><br></pre></td></tr></table></figure>

<h4 id="2-创建裸仓库"><a href="#2-创建裸仓库" class="headerlink" title="2. 创建裸仓库"></a>2. 创建裸仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/hexo.git &amp;&amp; <span class="built_in">cd</span> ~/hexo.git</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure>

<h4 id="3-设置自动部署脚本"><a href="#3-设置自动部署脚本" class="headerlink" title="3. 设置自动部署脚本"></a>3. 设置自动部署脚本</h4><p>编辑钩子脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>写入内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/home/<span class="variable">$USER</span>/hexo.git checkout -f</span><br></pre></td></tr></table></figure>

<p>然后：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ~/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="第三步：本地配置-Hexo-的-Git-部署"><a href="#第三步：本地配置-Hexo-的-Git-部署" class="headerlink" title="第三步：本地配置 Hexo 的 Git 部署"></a>第三步：本地配置 Hexo 的 Git 部署</h3><h4 id="1-修改本地-Hexo-的-config-yml"><a href="#1-修改本地-Hexo-的-config-yml" class="headerlink" title="1. 修改本地 Hexo 的 _config.yml"></a>1. 修改本地 Hexo 的 <code>_config.yml</code></h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">youruser@your.server.ip:/home/youruser/hexo.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h4 id="2-安装-Hexo-Git-部署插件"><a href="#2-安装-Hexo-Git-部署插件" class="headerlink" title="2. 安装 Hexo Git 部署插件"></a>2. 安装 Hexo Git 部署插件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="第四步：部署流程"><a href="#第四步：部署流程" class="headerlink" title="第四步：部署流程"></a>第四步：部署流程</h3><h4 id="1-本地生成静态文件"><a href="#1-本地生成静态文件" class="headerlink" title="1. 本地生成静态文件"></a>1. 本地生成静态文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate</span><br></pre></td></tr></table></figure>

<h4 id="2-推送到服务器"><a href="#2-推送到服务器" class="headerlink" title="2. 推送到服务器"></a>2. 推送到服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="第五步（可选）：配置-SSH-免密登录"><a href="#第五步（可选）：配置-SSH-免密登录" class="headerlink" title="第五步（可选）：配置 SSH 免密登录"></a>第五步（可选）：配置 SSH 免密登录</h3><h4 id="本地生成-SSH-密钥"><a href="#本地生成-SSH-密钥" class="headerlink" title="本地生成 SSH 密钥"></a>本地生成 SSH 密钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<h4 id="上传公钥到服务器"><a href="#上传公钥到服务器" class="headerlink" title="上传公钥到服务器"></a>上传公钥到服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id youruser@your.server.ip</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="第六步：访问你的博客"><a href="#第六步：访问你的博客" class="headerlink" title="第六步：访问你的博客"></a>第六步：访问你的博客</h3><p>打开浏览器访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://your.server.ip</span><br></pre></td></tr></table></figure>

<p>或者绑定域名后访问你的域名。</p>
<hr>
<h3 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h3><ul>
<li><p><strong>403 Forbidden：</strong></p>
<ul>
<li><p>确认 <code>/var/www/hexo</code> 有 <code>index.html</code></p>
</li>
<li><p>设置权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> -R 755 /var/www/hexo</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>无法写入 &#x2F;var&#x2F;www&#x2F;hexo：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R youruser:youruser /var/www/hexo</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>Hexo</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpeg的配置和B站视频转化的简单使用</title>
    <url>//posts/ffmpeg-Deploy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>环境：<br>    - Windows<br>工具：<br>    - <a href="https://gitee.com/YsKIKI/blog/releases/download/1.0.4/Notepad_plus_plus_V8.6.4.exe">Notepad++</a><br>    - ffmpeg  </p>
<ul>
<li><a href="#ffmpeg%E7%9A%84%E9%85%8D%E7%BD%AE">ffmpeg的配置</a><ul>
<li><a href="#%E4%B8%8B%E8%BD%BDffmpeg%E5%8C%85">下载ffmpeg包</a></li>
<li><a href="#%E8%A7%A3%E5%8E%8B%E7%BC%A9">解压缩</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">配置环境变量</a><ul>
<li><a href="#%E9%85%8D%E7%BD%AE">配置</a></li>
<li><a href="#%E6%A3%80%E6%9F%A5">检查</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%B0%86b%E7%AB%99%E8%A7%86%E9%A2%91%E8%BD%AC%E5%8C%96%E4%B8%BAmp4%E6%A0%BC%E5%BC%8F">将B站视频转化为.mp4格式</a><ul>
<li><a href="#%E6%89%BE%E5%88%B0b%E7%AB%99%E8%A7%86%E9%A2%91%E5%82%A8%E5%AD%98%E8%B7%AF%E5%BE%84">找到B站视频储存路径</a></li>
</ul>
</li>
</ul>
<h3 id="ffmpeg的配置"><a href="#ffmpeg的配置" class="headerlink" title="ffmpeg的配置"></a>ffmpeg的配置</h3><h4 id="下载ffmpeg包"><a href="#下载ffmpeg包" class="headerlink" title="下载ffmpeg包"></a>下载ffmpeg包</h4><p>你可以下载 <a href="fhttps://gitee.com/YsKIKI/blog/releases/download/1.0.2/ffmpeg.7z">这里</a> 的包  </p>
<blockquote>
<p>建议国内无VPN用户选择该方式下载</p>
</blockquote>
<p>也可以在<a href="https://ffmpeg.org/">ffmpeg官网</a>下载最新包</p>
<blockquote>
<p>建议有VPN的用户选择该方式下载</p>
</blockquote>
<h4 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h4><p>将ffmpeg的压缩包解压缩到一个 <strong>纯英文路径</strong> 的文件夹</p>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>打开 <code>ffmpeg</code>文件夹 &gt;&gt; <code>bin</code>目录<br>复制bin目录路径备用<br><code>win-I</code>打开设置 &gt;&gt; 系统 &gt;&gt; 系统信息 &gt;&gt; 高级系统设置 &gt;&gt; 环境变量<br>在<code>系统变量(S)</code>中找到<code>Path</code>，点击<code>编辑(I)…</code>，点击新建，粘贴你的bin目录路径：<br><img src="/ffmpeg-building/ffmpeg-1.png"><br><img src="/ffmpeg-building/ffmpeg-2.png"><br>点击 <strong><code>确定</code></strong> &gt;&gt; <strong><code>确定</code></strong> &gt;&gt; __<code>确定</code>__，环境变量即配置完毕</p>
<h5 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h5><p><code>win-R</code>打开<code>cmd</code>，输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ffmpeg -version</span><br></pre></td></tr></table></figure>
<p>出现：<br><img src="/ffmpeg-building/ffmpeg-3.png"><br>即配置完成</p>
<h3 id="将B站视频转化为-mp4格式"><a href="#将B站视频转化为-mp4格式" class="headerlink" title="将B站视频转化为.mp4格式"></a>将B站视频转化为.mp4格式</h3><h4 id="找到B站视频储存路径"><a href="#找到B站视频储存路径" class="headerlink" title="找到B站视频储存路径"></a>找到B站视频储存路径</h4><p>首先，我们要找到B站视频缓存的文件夹位置，找到两个<code>.m4s</code>文件，将其拷贝到另一空文件夹：<br><img src="/ffmpeg-building/ffmpeg-4.png"><br>将两个文件重命名为<code>video.m4s</code>和<code>audio.m4s</code>:<br><img src="/ffmpeg-building/ffmpeg-5.png"><br><font color="red"><font size="5">将两个文件都</font></font> 右键选择用<code>notepad++</code>打开，删除最前面的00……0，保存：<br><img src="/ffmpeg-building/ffmpeg-6.png"><br>在 此空文件夹 空白处右键 打开终端，输入：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i video.m4s -i audio.m4s -codec copy output.mp4</span><br></pre></td></tr></table></figure>
<p>执行命令后，出现：<br><img src="/ffmpeg-building/ffmpeg-7.png"><br>同时文件夹内出现的<code>output.mp4</code>即为转化完的视频 </p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将GitHub博客与域名关联</title>
    <url>//posts/G-blog-To-domain/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="如何将GitHub博客与域名关联"><a href="#如何将GitHub博客与域名关联" class="headerlink" title="如何将GitHub博客与域名关联"></a>如何将GitHub博客与域名关联</h2><p>书接上文，配置好了在GitHub上的个人博客之后，由于GitHub给我们的网址是 <a href="https://xxx.github.io/">https://xxx.github.io</a> ，有的人可能会觉得不是很美观。那么，有没有什么方法改变这个网址呢？  </p>
<p>当然是有的啦！首先我们需要准备一个域名</p>
<h4 id="注册域名"><a href="#注册域名" class="headerlink" title="注册域名"></a>注册域名</h4><p>国内有很多域名注册商，可以找一个注册域名：  </p>
<p>老牌域名注册商，运营正规 <a href="https://wanwang.aliyun.com/">万网</a> ⌈阿里云旗下⌋<br>专注于DNS解析服务 <a href="https://dnspod.cloud.tencent.com/">DNSPod</a> ⌈腾讯云旗下⌋  </p>
<blockquote>
<p>除了这两家还有很多域名注册商，不喜欢也可以换 新网，西部数码，易名中国 这些</p>
</blockquote>
<h4 id="进行DNS解析"><a href="#进行DNS解析" class="headerlink" title="进行DNS解析"></a>进行DNS解析</h4><p>什么？域名不能拿来就用吗？<br>当然不能啦！在使用域名之前，要先对域名进行DNS解析  </p>
<blockquote>
<p>域名解析（DNS解析）是把域名指向网站空间IP，让人们通过注册的域名可以方便地访问到网站的一种服务。IP地址是网络上标识站点的数字地址，为了方便记忆，采用域名来代替IP地址标识站点地址。域名解析就是域名到IP地址的转换过程。域名的解析工作由DNS服务器完成。  </p>
</blockquote>
<p>如果你是通过<code>万网</code>或<code>DNSPod</code>购买的域名，那么在购买完后进入控制台即可进行域名解析<br>或者，你还可以用 <a href="https://www.cloudflare-cn.com/">Cloudflare</a> 等进行解析  </p>
<p><strong>以cloudflare为例：</strong>  </p>
<blockquote>
<p>Cloudflare有自带防DDOS攻击，太香了（doge  </p>
</blockquote>
<p>要想用Cloudflare，需要在域名注册商处将<code>NS</code>改为 Cloudflare 的 NS：  </p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">brad.ns.cloudflare.com</span><br><span class="line">sunny.ns.cloudflare.com</span><br></pre></td></tr></table></figure>
<p><img src="/Blog-domain/Blog-domain-3.png"><br>在<code>DNS</code>中添加四条<code>A</code>类型，指向GitHub服务器：  </p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"><span class="number">185.199.108.153</span></span><br><span class="line"><span class="number">185.199.109.153</span></span><br><span class="line"><span class="number">185.199.110.153</span></span><br><span class="line"><span class="number">185.199.111.153</span></span><br></pre></td></tr></table></figure>
<p>添加一条www记录，让你的好友习惯性输入<code>www</code>后也可以访问你的博客：<br><img src="/Blog-domain/Blog-domain-1.png"><br>代理状态改为<code>已代理</code>，国内访问也很快啦！</p>
<h4 id="将域名关联到GitHub"><a href="#将域名关联到GitHub" class="headerlink" title="将域名关联到GitHub"></a>将域名关联到GitHub</h4><p>我们已经成功解析了域名，将域名关联到GitHub后，就可以输入你的域名访问博客了  </p>
<p>在输入域名之前，我们需要在本地 Blog 文件夹目录下的 sources 文件夹中新建一个 CHAME 文件：<br>新建 文本文档(.txt)&gt;&gt;双击打开编辑，在里面输入你的域名：<br><img src="/Blog-domain/Blog-domain-4.png"><br>保存，将文件后缀名<code>.txt</code>删除，返回 Blog 根目录，Hexo三连上传到GitHub    </p>
<p>打开你的 <strong>博客仓库</strong> ，点击：Settings-Pages，在这里输入你的域名：<br><img src="/Blog-domain/Blog-domain-2.png"><br>点击<code>save</code>，GitHub会自动对你的DNS进行检测，显示<code>successful</code>的时候就大功告成啦！</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu上配置nodejs和redis</title>
    <url>//posts/Ubuntu-nr-help/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="在Ubuntu上配置nodejs和redis（记录篇）"><a href="#在Ubuntu上配置nodejs和redis（记录篇）" class="headerlink" title="在Ubuntu上配置nodejs和redis（记录篇）"></a>在Ubuntu上配置nodejs和redis（记录篇）</h2><p>由于嫌弃服务器上用Windows的话图形化界面太耗资源，这两天把服务器系统换成了Ubuntu，虽然速度提升聊胜于无，但蚊子腿再小也是肉~o.0~<br>为了防止云服务器到期的时候再配置又要查资料，在这里写一篇记录篇，查起来也方便  </p>
<h3 id="系统：Ubuntu-20-04"><a href="#系统：Ubuntu-20-04" class="headerlink" title="系统：Ubuntu-20.04"></a>系统：Ubuntu-20.04</h3><p>Ubuntu自带apt包，所以大部分时候只要<code>apt-get install</code>就行了，非常方便  </p>
<p>输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -i</span><br></pre></td></tr></table></figure>
<p>进入管理员形态！！  </p>
<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p>这个没什么好说的，脑子没毛病都知道怎么做</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install git</span><br></pre></td></tr></table></figure>
<h4 id="安装Nodejs-18-x"><a href="#安装Nodejs-18-x" class="headerlink" title="安装Nodejs 18.x"></a>安装Nodejs 18.x</h4><p>先安装<code>curl</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install curl</span><br></pre></td></tr></table></figure>
<p>然后输入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://deb.nodesource.com/setup_18.x | <span class="built_in">sudo</span> -E bash - &amp;&amp;\</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y nodejs</span><br></pre></td></tr></table></figure>
<p>Nodejs 18.x就安装好了<br>检查：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@VM-4-10-ubuntu:~# node -v</span><br><span class="line">v18.19.1</span><br><span class="line">root@VM-4-10-ubuntu:~# npm -v</span><br><span class="line">10.2.4</span><br><span class="line">root@VM-4-10-ubuntu:~# npx -v</span><br><span class="line">10.2.4</span><br></pre></td></tr></table></figure>
<p>装的好好的，没啥毛病✓</p>
<h4 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h4><p>官方的apt包里包含了redis，所以同上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install redis</span><br></pre></td></tr></table></figure>
<p>就好了  </p>
<p>与Windows里redis需要自己启动运行不同，这里的redis安装完自动运行，省心得很<br>如果要查看redis有没有在运行了，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status redis-server</span><br><span class="line">service --status-all				<span class="comment">#查询开启的服务</span></span><br></pre></td></tr></table></figure>
<p>两个命令都可以看出redis的运行状态</p>
<blockquote>
<p>附上开启、关闭和重启redis服务命令：  </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server stop  </span><br><span class="line">redis-server start  </span><br><span class="line">redis-server restart  </span><br></pre></td></tr></table></figure>
<blockquote>
</blockquote>
<h4 id="PS：一些ex人的地方："><a href="#PS：一些ex人的地方：" class="headerlink" title="PS：一些ex人的地方："></a>PS：一些ex人的地方：</h4><ul>
<li>puppeteer的版本太新会抽风，使用以下代码进行治疗： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm install puppeteer@13.7.0 -w</span><br></pre></td></tr></table></figure></li>
<li>Ubuntu会出现：<code>Error: Failed to launch the browser process!</code>，网上查了好久一点有用的没有，我直接：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install ca-certificates fonts-liberation libappindicator3-1 libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release wget xdg-utils -y</span><br></pre></td></tr></table></figure>
安装依赖，然后就好了✓</li>
<li>Ubuntu里要用screen同时运行 签名API 和 本体，附上↓↓↓仅供参考：<blockquote>
<p>其实这玩意只要脑子没坏都知道，但是万一脑子坏了呢o.0</p>
<blockquote>
<p>签名API填地址用<code>http://</code>嗷，不要傻乎乎地用<code>https://</code></p>
</blockquote>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -S &lt;名字&gt;				<span class="comment">#创建一个新的终端会话</span></span><br><span class="line">Ctrl-A-D				<span class="comment">#退出当前的终端会话，保持后台运行</span></span><br><span class="line">screen -<span class="built_in">ls</span>				<span class="comment">#查看当前存在的所有终端会话</span></span><br><span class="line">screen -S &lt;名字&gt; -X quit			<span class="comment">#删除某个终端会话</span></span><br><span class="line">screen -r &lt;名字&gt;				<span class="comment">#切换到某个终端会话</span></span><br></pre></td></tr></table></figure>
到时候看需要再补充吧。</li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>Ubuntu22.04</tag>
        <tag>Redis-Server</tag>
      </tags>
  </entry>
</search>
